<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunitlite</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.TestDelegate">
            <summary>
            Delegate used by tests that execute code and
            capture any thrown exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String)">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/>. 
            This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is 
            passed in. This causes the test to be reported as ignored. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>. 
            This causes the test to be reported as ignored. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message that is 
            passed in. This causes the test to be reported as inconclusive. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/>. 
            This causes the test to be reported as Inconclusive. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A constraint to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. 
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <remarks>
            This method is provided for use by VB developers needing to test
            the value of properties with private setters.
            </remarks>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate does not throw an exception
            </summary>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two unsigned ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two unsigned ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two unsigned ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two unsigned longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two unsigned longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two unsigned longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two ints are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two ints are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two ints are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two longs are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two longs are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two longs are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two unsigned ints are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two unsigned ints are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two unsigned ints are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two unsigned longs are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two unsigned longs are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two unsigned longs are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two decimals are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two decimals are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two decimals are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two floats are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that two floats are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Verifies that two floats are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Verifies that two doubles are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AssertDoublesAreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.AssertionHelper">
            <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names for constraints and
            asserts and avoiding conflict with the definition of 
            <see cref="T:NUnit.Framework.Is"/>, from which it inherits much of its
            behavior, in certain mock object frameworks.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintFactory">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to <see cref="M:NUnit.Framework.Assert.That(System.Boolean)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection)">
            <summary>
            Returns a ListMapper based on a collection.
            </summary>
            <param name="original">The original collection</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Assume">
            <summary>
            Provides static methods to express the assumptions
            that must be met for a test to give a meaningful
            result. If an assumption is not met, the test
            should produce an inconclusive result.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assume.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the 
            method throws an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.Contains">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Item(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Substring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="T:NUnit.Env">
            <summary>
            Env is a static class that provides some of the features of
            System.Environment that are not available under all runtimes
            </summary>
        </member>
        <member name="F:NUnit.Env.NewLine">
            <summary>
            The newline sequence in the current environmemt.
            </summary>
        </member>
        <member name="F:NUnit.Env.DocumentFolder">
            <summary>
            Path to the 'My Documents' folder
            </summary>
        </member>
        <member name="T:NUnit.Framework.GlobalSettings">
            <summary>
            GlobalSettings is a place for setting default values used
            by the framework in performing asserts.
            </summary>
        </member>
        <member name="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance">
            <summary>
            Default tolerance for floating point equality
            </summary>
        </member>
        <member name="T:NUnit.Framework.Guard">
            <summary>
            Class used to guard against unexpected argument values
            by throwing an appropriate exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if an argument is null
            </summary>
            <param name="value">The value to be tested</param>
            <param name="name">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if a string argument is null or empty
            </summary>
            <param name="value">The value to be tested</param>
            <param name="name">The name of the argument</param>
        </member>
        <member name="T:NUnit.Framework.Has">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IExpectException">
            <summary>
            Interface implemented by a user fixture in order to
            validate any expected exceptions. It is only called
            for test methods marked with the ExpectedException
            attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IExpectException.HandleException(System.Exception)">
            <summary>
            Method to handle an expected exception
            </summary>
            <param name="ex">The exception to be handled</param>
        </member>
        <member name="T:NUnit.Framework.Is">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Iz">
            <summary>
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ListMapper">
            <summary>
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ListMapper.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a ListMapper based on a collection
            </summary>
            <param name="original">The collection to be transformed</param>
        </member>
        <member name="M:NUnit.Framework.ListMapper.Property(System.String)">
            <summary>
            Produces a collection containing all the values of a property
            </summary>
            <param name="name">The collection of property values</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.MessageMatch">
            <summary>
            Enumeration indicating how the expected message parameter is to be used
            </summary>
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Exact">
            Expect an exact match
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Contains">
            Expect a message containing the parameter string
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Regex">
            Match the regular expression provided as a parameter
        </member>
        <member name="F:NUnit.Framework.MessageMatch.StartsWith">
            Expect a message that starts with the parameter string
        </member>
        <member name="T:NUnit.ObjectList">
            <summary>
            ObjectList represents a collection of objects. It is implemented 
            as a List&lt;object&gt; in .NET 2.0 or higher and as an ArrayList otherwise.
            ObjectList does not attempt to be a general replacement for either of
            these classes but only implements what is needed within the framework.
            </summary>
        </member>
        <member name="M:NUnit.ObjectList.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of values to the collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:NUnit.Framework.SpecialValue">
            <summary>
            The SpecialValue enum is used to represent TestCase arguments
            that cannot be used as arguments to an Attribute.
            </summary>
        </member>
        <member name="F:NUnit.Framework.SpecialValue.Null">
            <summary>
            Null represents a null value, which cannot be used as an 
            argument to an attriute under .NET 1.x
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseData">
            <summary>
            The TestCaseData class represents a set of arguments
            and other parameter info to be used for a parameterized
            test case. It provides a number of instance modifiers
            for use in initializing the test case.
            
            Note: Instance modifiers are getters that return
            the same instance after modifying it's state.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.RunState">
            <summary>
            Gets the RunState for this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.ExpectedResult">
            <summary>
            Gets the expected result of the test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.HasExpectedResult">
            <summary>
            Returns true if an expected result has been set
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.ExceptionData">
            <summary>
            Gets data about any expected exception.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestCaseData.Properties">
            <summary>
            Gets the property dictionary for the test case
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.arguments">
            <summary>
            The argument list to be provided to the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.expectedResult">
            <summary>
            The expected result to be returned
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.exceptionData">
            <summary>
            Data about any expected exception.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Returns(System.Object)">
            <summary>
            Sets the expected result for the test
            </summary>
            <param name="result">The expected result</param>
            <returns>A modified TestCaseData</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Throws(System.Type)">
            <summary>
            Sets the expected exception type for the test
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Throws(System.String)">
            <summary>
            Sets the expected exception type for the test
            </summary>
            <param name="exceptionName">FullName of the expected exception.</param>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetName(System.String)">
            <summary>
            Sets the name of the test case
            </summary>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetDescription(System.String)">
            <summary>
            Sets the description for the test case
            being constructed.
            </summary>
            <param name="description">The description.</param>
            <returns>The modified TestCaseData instance.</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetCategory(System.String)">
            <summary>
            Applies a category to the test
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.String)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Int32)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Double)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore">
            <summary>
            Ignores this TestCase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Explicit">
            <summary>
            Marks the test case as explicit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Explicit(System.String)">
            <summary>
            Marks the test case as explicit, specifying the reason.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore(System.String)">
            <summary>
            Ignores this TestCase, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExpectedResult">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.HasExpectedResult">
            <summary>
            Returns true if the expected result has been set
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExceptionData">
            <summary>
            Gets data about any expected exception.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.RunState">
            <summary>
            Gets the RunState for this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext">
            <summary>
            Provide the context information of the current test.
            This is an adapter for the internal ExecutionContext
            class, hiding the internals from the user test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.#ctor(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Construct a TestContext for an ExecutionContext
            </summary>
            <param name="ec">The ExecutionContext to adapt</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.CurrentContext">
            <summary>
            Get the current test context. This is created
            as needed. The user may save the context for
            use within a test, but it should not be used
            outside the test for which it is created.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Test">
            <summary>
            Get a representation of the current test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Result">
            <summary>
            Gets a Representation of the TestResult for the current test. 
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.WorkDirectory">
            <summary>
            Gets the directory to be used for outputing files created
            by this test run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.TestAdapter">
            <summary>
            TestAdapter adapts a Test for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.TestAdapter.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestAdapter for a Test
            </summary>
            <param name="test">The Test to be adapted</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.ID">
            <summary>
            Gets the unique Id of a test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Name">
            <summary>
            The name of the test, which may or may not be 
            the same as the method name.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.MethodName">
            <summary>
            The name of the method representing the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.FullName">
            <summary>
            The FullName of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Properties">
            <summary>
            The properties of the test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.ResultAdapter">
            <summary>
            ResultAdapter adapts a TestResult for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.ResultAdapter.#ctor(NUnit.Framework.Internal.TestResult)">
            <summary>
            Construct a ResultAdapter for a TestResult
            </summary>
            <param name="result">The TestResult to be adapted</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Outcome">
            <summary>
            Gets a ResultState representing the outcome of the test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Throws">
            <summary>
            Helper class with properties and methods that supply
            constraints that operate on exceptions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf(System.Type)">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf``1">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf(System.Type)">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf``1">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Exception">
            <summary>
            Creates a constraint specifying an expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InnerException">
            <summary>
            Creates a constraint specifying an exception with a given InnerException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.TargetInvocationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InvalidOperationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Nothing">
            <summary>
            Creates a constraint specifying that no exception is thrown
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.ExpectedExceptionData">
            <summary>
            ExpectedExceptionData is a struct used within the framework
            to encapsulate information about an expected exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ExpectedExceptionData.GetExceptionHandler(System.Type)">
            <summary>
            Returns a MethodInfo for the handler to be used to
            validate any exception thrown.
            </summary>
            <param name="fixtureType">The Type of the fixture.</param>
            <returns>A MethodInfo.</returns>
        </member>
        <member name="P:NUnit.Framework.Api.ExpectedExceptionData.ExpectedExceptionType">
            <summary>
            The Type of any exception that is expected.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ExpectedExceptionData.ExpectedExceptionName">
            <summary>
            The FullName of any exception that is expected
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ExpectedExceptionData.ExpectedMessage">
            <summary>
            The Message of any exception that is expected
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ExpectedExceptionData.MatchType">
            <summary>
             The type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ExpectedExceptionData.UserMessage">
            <summary>
            A user message to be issued in case of error
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ExpectedExceptionData.HandlerName">
            <summary>
            The name of an alternate exception handler to be
            used to validate the exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.IParameterDataSource">
            <summary>
            The IParameterDataSource interface is implemented by types
            that can provide data for a test method parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IParameterDataSource.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Gets an enumeration of data items for use as arguments
            for a test method parameter.
            </summary>
            <param name="parameter">The parameter for which data is needed</param>
            <returns>An enumeration containing individual data items</returns>
        </member>
        <member name="T:NUnit.Framework.Api.IPropertyBag">
            <summary>
            A PropertyBag represents a collection of name/value pairs
            that allows duplicate entries with the same key. Methods
            are provided for adding a new pair as well as for setting
            a key to a single value. All keys are strings but values
            may be of any type. Null values are not permitted, since
            a null entry represents the absence of the key.
            
            The entries in a PropertyBag are of two kinds: those that
            take a single value and those that take multiple values.
            However, the PropertyBag has no knowledge of which entries
            fall into each category and the distinction is entirely
            up to the code using the PropertyBag.
            
            When working with multi-valued properties, client code
            should use the Add method to add name/value pairs and 
            indexing to retrieve a list of all values for a given
            key. For example:
            
                bag.Add("Tag", "one");
                bag.Add("Tag", "two");
                Assert.That(bag["Tag"],
                  Is.EqualTo(new string[] { "one", "two" })); 
            
            When working with single-valued propeties, client code
            should use the Set method to set the value and Get to
            retrieve the value. The GetSetting methods may also be
            used to retrieve the value in a type-safe manner while
            also providing  default. For example:
            
                bag.Set("Priority", "low");
                bag.Set("Priority", "high"); // replaces value
                Assert.That(bag.Get("Priority"),
                  Is.EqualTo("high"));
                Assert.That(bag.GetSetting("Priority", "low"),
                  Is.EqualTo("high"));
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.IXmlNodeBuilder">
            <summary>
            An object implementing IXmlNodeBuilder is able to build 
            an XmlResult representation of itself and any children.
            Note that the interface refers to the implementation
            of XmlNode in the NUnit.Framework.Api namespace.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IXmlNodeBuilder.ToXml(System.Boolean)">
            <summary>
            Returns an XmlNode representating the current object.
            </summary>
            <param name="recursive">If true, children are included where applicable</param>
            <returns>An XmlNode representing the result</returns>
        </member>
        <member name="M:NUnit.Framework.Api.IXmlNodeBuilder.AddToXml(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current object after 
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, children are included, where applicable</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the property bag
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value for a key, removing any other
            values that are already in the property set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple values are present and returning
            null if the value is not found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.GetSetting(System.String,System.String)">
            <summary>
            Gets a single string value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.GetSetting(System.String,System.Int32)">
            <summary>
            Gets a single int value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.GetSetting(System.String,System.Boolean)">
            <summary>
            Gets a single boolean value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.GetSetting(System.String,System.Enum)">
            <summary>
            Gets a single enum value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Remove(System.String)">
            <summary>
             Removes all entries for a key from the property set.
             If the key is not found, no error occurs.
            </summary>
            <param name="key">The key for which the entries are to be removed</param>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Remove(System.String,System.Object)">
            <summary>
            Removes a single entry if present. If not found,
            no error occurs.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Remove(NUnit.Framework.Api.PropertyEntry)">
            <summary>
            Removes a specific PropertyEntry. If the entry is not
            found, no errr occurs.
            </summary>
            <param name="entry">The property entry to remove</param>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.ContainsKey(System.String)">
            <summary>
            Gets a flag indicating whether the specified key has
            any entries in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <returns>True if their are values present, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Contains(System.String,System.Object)">
            <summary>
            Gets a flag indicating whether the specified key and
            value are present in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <param name="value">The value to be checked</param>
            <returns>True if the key and value are present, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Api.IPropertyBag.Contains(NUnit.Framework.Api.PropertyEntry)">
            <summary>
            Gets a flag indicating whether the specified key and
            value are present in the property set.
            </summary>
            <param name="entry">The property entry to be checked</param>
            <returns>True if the entry is present, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Api.IPropertyBag.Count">
            <summary>
            Get the number of key/value pairs in the property bag
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.IPropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of values for a particular key
            </summary>
            <param name="key">The key for which the values are to be retrieved or set</param>
        </member>
        <member name="P:NUnit.Framework.Api.IPropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.ITest">
            <summary>
            Common interface supported by all representations
            of a test. Only includes informational fields.
            The Run method is specifically excluded to allow
            for data-only representations of a test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.Id">
            <summary>
            Gets or sets the id of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.Name">
            <summary>
            Gets the name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.FullName">
            <summary>
            Gets the fully qualified name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.FixtureType">
            <summary>
            Gets the Type of the test fixture, if applicable, or
            null if no fixture type is associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.RunState">
            <summary>
            Indicates whether the test can be run using
            the RunState enum.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.TestCaseCount">
            <summary>
            Count of the test cases ( 1 if this is a test case )
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.Properties">
            <summary>
            Gets the properties of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.Parent">
            <summary>
            Gets the parent test, if any.
            </summary>
            <value>The parent test or null if none exists.</value>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITest.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="T:NUnit.Framework.Api.ITestAssemblyBuilder">
            <summary>
            The ITestAssemblyBuilder interface is implemented by a class
            that is able to build a suite of tests given an assembly or 
            an assembly filename.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests from a provided assembly
            </summary>
            <param name="assembly">The assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>A TestSuite containing the tests found in the assembly</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.String,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests given the filename of an assembly
            </summary>
            <param name="assemblyName">The filename of the assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>A TestSuite containing the tests found in the assembly</returns>
        </member>
        <member name="T:NUnit.Framework.Api.ITestAssemblyRunner">
            <summary>
            The ITestAssemblyRunner interface is implemented by classes
            that are able to execute a suite of tests loaded
            from an assembly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Load(System.String,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly, returning an 
            indication of whether or not the load succeeded.
            </summary>
            <param name="assemblyName">File name of the assembly to load</param>
            <param name="settings">Dictionary of settings to use in loading the test</param>
            <returns>True if the load was successful</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Load(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly, returning an 
            indication of whether or not the load succeeded.
            </summary>
            <param name="assembly">The assembly to load</param>
            <param name="settings">Dictionary of settings to use in loading the test</param>
            <returns>True if the load was successful</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Run(NUnit.Framework.Api.ITestListener,NUnit.Framework.Api.ITestFilter)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">Interface to receive ITestListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.LoadedTest">
            <summary>
            Gets the tree of loaded tests, or null if
            no tests have been loaded.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.ITestCaseSource">
            <summary>
            ITestCaseSource interface is implemented by Types that know how to 
            return a set of ITestCaseData items for use by a test method.
            </summary>
            <remarks>
            This method is defined differently depending on the version of .NET.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Api.ITestCaseSource.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Returns a set of ITestCaseDataItems for use as arguments
            to a parameterized test method.
            </summary>
            <param name="method">The method for which data is needed.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Api.ITestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestFilter.Pass(NUnit.Framework.Api.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. Pass
            may examine the parents and/or descendants of a test, depending
            on the semantics of the particular filter
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the fFilter, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Api.ITestListener">
            <summary>
            The ITestListener interface is used internally to receive 
            notifications of significant events while a test is being 
            run. The events are propogated to clients by means of an
            AsyncCallback. NUnit extensions may also monitor these events.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestListener.TestStarted(NUnit.Framework.Api.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Api.ITestListener.TestFinished(NUnit.Framework.Api.ITestResult)">
            <summary>
            Called when a test has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Api.ITestListener.TestOutput(NUnit.Framework.Api.TestOutput)">
            <summary>
            Called when the test creates text output.
            </summary>
            <param name="testOutput">A console message</param>
        </member>
        <member name="T:NUnit.Framework.Api.ITestResult">
            <summary>
            The ITestResult interface represents the result of a test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which 
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.Time">
            <summary>
            Gets the elapsed time for running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an
            error or failure. Not available in
            the Compact Framework 1.0.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.AssertCount">
            <summary>
            Gets the number of asserts executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            Accessing HasChildren should not force creation of the
            Children collection in classes implementing this interface.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.Children">
            <summary>
            Gets the the collection of child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestResult.Test">
            <summary>
            Gets the Test to which this result applies.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.PropertyEntry">
            <summary>
            Immutable class that stores a property entry as a Name/Value pair.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.PropertyEntry.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new immutable instance of the <see cref="T:NUnit.Framework.Api.PropertyEntry"/> class.  
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Api.PropertyEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NUnit.Framework.Api.PropertyEntry.Name">
            <summary>Name of the PropertyEntry.</summary>
        </member>
        <member name="P:NUnit.Framework.Api.PropertyEntry.Value">
            <summary>Value of the PropertyEntry.</summary>
        </member>
        <member name="T:NUnit.Framework.Api.ResultState">
            <summary>
            The ResultState class represents the outcome of running a test.
            It contains two pieces of information. The Status of the test
            is an enum indicating whether the test passed, failed, was
            skipped or was inconclusive. The Label provides a more
            detailed breakdown for use by client runners.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ResultState.#ctor(NUnit.Framework.Api.TestStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
        </member>
        <member name="M:NUnit.Framework.Api.ResultState.#ctor(NUnit.Framework.Api.TestStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="label">The label.</param>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Inconclusive">
            <summary>
            The result is inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.NotRunnable">
            <summary>
            The test was not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Skipped">
            <summary>
            The test has been skipped. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Ignored">
            <summary>
            The test has been ignored.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Success">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Failure">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Error">
            <summary>
            The test encountered an unexpected exception
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.ResultState.Cancelled">
            <summary>
            The test was cancelled by the user
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ResultState.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NUnit.Framework.Api.ResultState.Status">
            <summary>
            Gets the TestStatus for the test.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:NUnit.Framework.Api.ResultState.Label">
            <summary>
            Gets the label under which this test resullt is
            categorized, if any.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.RunState">
            <summary>
            The RunState enum indicates whether a test
            can be executed. When used on a TestResult
            it may also indicate whether the test has
            been executed. See individual values for
            restrictions on use.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.RunState.NotRunnable">
            <summary>
            The test is not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.RunState.Runnable">
            <summary>
            The test is runnable. This value would 
            normally not appear on a TestResult, since
            it would change to Executed.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.RunState.Explicit">
            <summary>
            The test can only be run explicitly. Would
            normally not appear on a TestResult, since
            it would change to Executed or Skipped.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.RunState.Skipped">
            <summary>
            The test has been skipped. This value may
            appear on a Test when certain attributes
            are used to skip the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.RunState.Ignored">
            <summary>
            The test has been ignored. May appear on
            a Test, when the IgnoreAttribute is used.
            Appears on a TestResult in that case or
            if the test is dynamically ignored.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.TestOutput">
            <summary>
            The TestOutput class holds a unit of output from 
            a test to either stdOut or stdErr
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.TestOutput.#ctor(System.String,NUnit.Framework.Api.TestOutputType)">
            <summary>
            Construct with text and an ouput destination type
            </summary>
            <param name="text">Text to be output</param>
            <param name="type">Destination of output</param>
        </member>
        <member name="M:NUnit.Framework.Api.TestOutput.ToString">
            <summary>
            Return string representation of the object for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Api.TestOutput.Text">
            <summary>
            Get the text 
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.TestOutput.Type">
            <summary>
            Get the output type
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.TestOutputType">
            <summary>
            Enum representing the output destination
            It uses combinable flags so that a given
            output control can accept multiple types
            of output. Normally, each individual
            output uses a single flag value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestOutputType.Out">
            <summary>
            Send output to stdOut
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestOutputType.Error">
            <summary>
            Send output to stdErr
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestOutputType.Trace">
            <summary>
            Send output to Trace
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestOutputType.Log">
            <summary>
            Send output to Log
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.TestStatus">
            <summary>
            The TestStatus enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestStatus.Inconclusive">
            <summary>
            The test was inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestStatus.Skipped">
            <summary>
            The test has skipped 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestStatus.Passed">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.TestStatus.Failed">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.XmlNode">
            <summary>
            XmlNode represents a single node in the XML representation
            of a Test or TestResult. It replaces System.Xml.XmlNode and
            provides a minimal set of methods for operating on the XML 
            in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.#ctor(System.String)">
            <summary>
            Constructs a new instance of XmlNode
            </summary>
            <param name="name">The name of the node</param>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.CreateTopLevelElement(System.String)">
            <summary>
            Creates a new top level element node.
            </summary>
            <param name="name">The element name.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.AddElement(System.String)">
            <summary>
            Adds a new element as a child of the current node and returns it.
            </summary>
            <param name="name">The element name.</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.AddAttribute(System.String,System.String)">
            <summary>
            Adds an attribute with a specified name and value to the XmlNode.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.FindDescendant(System.String)">
            <summary>
            Finds a single descendant of this node matching an xpath
            specification. The format of the specification is
            limited to what is needed by NUnit and its tests.
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.FindDescendants(System.String)">
            <summary>
            Finds all descendants of this node matching an xpath
            specification. The format of the specification is
            limited to what is needed by NUnit and its tests.
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Api.XmlNode.WriteTo(System.Xml.XmlTextWriter)">
            <summary>
            Writes the XML representation of the node to an XmlWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:NUnit.Framework.Api.XmlNode.Name">
            <summary>
            Gets the name of the node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.XmlNode.TextContent">
            <summary>
            Gets the text content of the node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.XmlNode.EscapedTextContent">
            <summary>
            Gets the text content of the node escaped as needed.
            This is for use in writing out the XML representation.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.XmlNode.Attributes">
            <summary>
            Gets the dictionary of attributes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.XmlNode.ChildNodes">
            <summary>
            Gets a list of child nodes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.XmlNode.FirstChild">
            <summary>
            Gets the first child of this node, or null
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.NodeList">
            <summary>
            Class used to represent a list of XmlResults
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.AttributeDictionary">
            <summary>
            Class used to represent the attributes of a node
            </summary>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestModificationAttribute">
            <summary>
            The abstract base class for all NUnitAttributes that modify
            to a test once it has been constructed. It is used by the
            framework to select all test-modifying attributes on a test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.NUnitAttribute">
            <summary>
            The abstract base class for all custom attributes defined by NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NUnitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestModificationAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.IApplyToTest">
            <summary>
            The IApplyToTest interface is implemented by self-applying
            attributes that modify the state of a test in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.IApplyToTest.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test as defined for the specific attribute.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a category to it.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument 
            data provided. Since this is the default, the attribute is
            not needed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding properties to it.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Causes a test to be skipped if this CultureAttribute is not satisfied.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported">
            <summary>
            Tests to determine if the current culture is supported
            based on the properties of this attribute.
            </summary>
            <returns>True, if the current culture is supported</returns>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture names</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of culturess
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.DataAttribute">
            <summary>
            The abstract base class for all data-providing attributes 
            defined by NUnit. Used to select all data sources for a 
            method, class or parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DataAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Used to mark a field, property or method providing a set of datapoints to 
            be used in executing any theories within the same fixture that require an 
            argument of the Type provided. The data source may provide an array of
            the required Type or an IEnumerable&lt;T&gt;.
            Synonymous with DatapointSourceAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointSourceAttribute">
            <summary>
            Used to mark a field, property or method providing a set of datapoints to 
            be used in executing any theories within the same fixture that require an 
            argument of the Type provided. The data source may provide an array of
            the required Type or an IEnumerable&lt;T&gt;.
            Synonymous with DatapointsAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct a description Attribute
            </summary>
            <param name="description">The text of the description</param>
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor">
            <summary>
            Constructor for a non-specific exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message text
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.UserMessage">
            <summary>
            Gets or sets the user message displayed in case of failure
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.Handler">
            <summary>
             Gets the name of a method to be used as an exception handler
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExceptionData">
            <summary>
            Gets all data about the expected exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionDecorator">
            <summary>
            ExpectedExceptionDecorator applies to a TestCommand and returns
            a success result only if the expected exception is thrown. 
            Otherwise, an appropriate failure result is returned.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.ICommandDecorator">
            <summary>
            ICommandDecorator is implemented by attributes and other
            objects able to decorate a TestCommand, usually by wrapping
            it with an outer command.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.ICommandDecorator.Decorate(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Decorate a command, usually by wrapping it with another
            command, and return the decorated command.
            </summary>
            <param name="command">The command to be decorated</param>
            <returns>The decorated command</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.ICommandDecorator.Stage">
            <summary>
            The stage of command execution to which this decorator applies.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.ICommandDecorator.Priority">
            <summary>
            The priority of this decorator as compared to other decorators
            in the same Stage. Lower values are applied first.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionDecorator.#ctor(NUnit.Framework.Api.ExpectedExceptionData)">
            <summary>
            Construct an ExpectedExceptionDecorator using specified data.
            </summary>
            <param name="exceptionData">Data describing the expected exception</param>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by marking it as explicit.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Constructs the attribute without giving a reason 
            for ignoring the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by marking it as Ignored.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Summary description for MaxTimeAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test to use a pairwise join of any argument 
            data provided. Arguments will be combined in such a
            way that all possible pairs of arguments are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Causes a test to be skipped if this PlatformAttribute is not satisfied.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            RandomAttribute is used to supply a set of random values
            to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a set of Enums if the type is an Enum otherwise
            Construct a set of doubles from 0.0 to 1.0,
            specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Construct a set of doubles from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a set of ints from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            RangeAttribute is used to supply a range of values to an
            individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a range of ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a range of ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construct a range of longs
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a range of doubles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a range of floats
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a Sequential join of any argument 
            data provided. Arguments will be combined into test cases,
            taking the next value of each argument until all are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PreTestAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PostTestAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used to identify a method that is called 
            immediately after each test is run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="M:NUnit.Framework.TestAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a description, if not already set.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Returns an collection containing a single ITestCaseData item,
            constructed from the arguments provided in the constructor and
            possibly converted to match the specified method.
            </summary>
            <param name="method">The method for which data is being provided</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.PerformSpecialConversions(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Performs several special conversions allowed by NUnit in order to
            permit arguments with types that cannot be used in the constructor
            of an Attribute such as TestCaseAttribute or to simplify their use.
            </summary>
            <param name="arglist">The arguments to be converted</param>
            <param name="parameters">The ParameterInfo array for the method</param>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.HasExpectedResult">
            <summary>
            Returns true if the expected result has been set
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExceptionData">
            <summary>
            Gets data about any expected exception for this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception.
            </summary>
            <value>The expected exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the name the expected exception.
            </summary>
            <value>The expected name of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message of the expected exception
            </summary>
            <value>The expected message of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Explicit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestCaseAttribute"/> is explicit.
            </summary>
            <value>
            <c>true</c> if explicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.RunState">
            <summary>
            Gets the RunState of this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the test.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. When set to a non-null
            non-empty value, the test is marked as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Categories">
            <summary>
            Gets a list of categories for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Properties">
            <summary>
            NYI
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            TestCaseSourceAttribute indicates the source to be used to
            provide test cases for a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the method, property or field that will prvide data
            </summary>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type
            </summary>
            <param name="sourceType">The type that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Returns a set of ITestCaseDataItems for use as arguments
            to a parameterized test method.
            </summary>
            <param name="method">The method for which data is needed.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.InitializeArgs">
            <summary>
            Helper method to split the original argument list
            into type arguments and constructor arguments.
            This action has to be delayed rather than done in
            the constructor, since TypeArgs may be set by
            menas of a named parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a description, if not already set.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Arguments">
            <summary>
            The arguments originally provided to the attribute
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestFixtureAttribute"/> should be ignored.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. May set Ignored as a side effect.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TypeArgs">
            <summary>
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Categories">
            <summary>
            Gets a list of categories for this fixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TheoryAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="T:NUnit.Framework.ValueSourceAttribute">
            <summary>
            ValueSourceAttribute indicates the source to be used to
            provide data for one parameter of a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">The name of the data source to be used</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Gets an enumeration of data items for use as arguments
            for a test method parameter.
            </summary>
            <param name="parameter">The parameter for which data is needed</param>
            <returns>
            An enumeration containing individual data items
            </returns>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndOperator">
            <summary>
            Operator that requires both it's arguments to succeed
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryOperator">
            <summary>
            Abstract base class for all binary operators
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintOperator">
            <summary>
            The ConstraintOperator class is used internally by a
            ConstraintBuilder to represent an operator that 
            modifies or combines constraints. 
            
            Constraint operators use left and right precedence
            values to determine whether the top operator on the
            stack should be reduced before pushing a new operator.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.left_precedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.right_precedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftContext">
            <summary>
            The syntax element preceding this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightContext">
            <summary>
            The syntax element folowing this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftPrecedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightPrecedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Abstract method that produces a constraint by applying
            the operator to its left and right constraint arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.LeftPrecedence">
            <summary>
            Gets the left precedence of the operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.RightPrecedence">
            <summary>
            Gets the right precedence of the operator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.#ctor">
            <summary>
            Construct an AndOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply the operator to produce an AndConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeOperator">
            <summary>
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SelfResolvingOperator">
            <summary>
            Abstract base class for operators that are able to reduce to a 
            constraint whether or not another syntactic element follows.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.#ctor(System.Type)">
            <summary>
            Construct an AttributeOperator for a particular Type
            </summary>
            <param name="type">The Type of attribute tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOperator">
            <summary>
            Abstract base for operators that indicate how to
            apply a constraint to items in a collection.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixOperator">
            <summary>
            PrefixOperator takes a single constraint and modifies
            it's action in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint created by applying this
            prefix to another constraint.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOperator.#ctor">
            <summary>
            Constructs a CollectionOperator
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllOperator">
            <summary>
            Represents a constraint that succeeds if all the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeOperator">
            <summary>
            Represents a constraint that succeeds if any of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            any of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoneOperator">
            <summary>
            Represents a constraint that succeeds if none of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoneOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountOperator">
            <summary>
            Represents a constraint that succeeds if the specified 
            count of members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.#ctor(System.Int32)">
            <summary>
            Construct an ExactCountOperator for a specified count
            </summary>
            <param name="expectedCount">The expected count</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotOperator">
            <summary>
            Negates the test of the constraint it wraps.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.#ctor">
            <summary>
            Constructs a new NotOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a NotConstraint applied to its argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrOperator">
            <summary>
            Operator that requires at least one of it's arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.#ctor">
            <summary>
            Construct an OrOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply the operator to produce an OrConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropOperator">
            <summary>
            Operator used to test for the presence of a named Property
            on an object and optionally apply further tests to the
            value of that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.#ctor(System.String)">
            <summary>
            Constructs a PropOperator for a particular named property
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropOperator.Name">
            <summary>
            Gets the name of the property to which the operator applies
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsOperator">
            <summary>
            Operator that tests that an exception is thrown and
            optionally applies further tests to the exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.#ctor">
            <summary>
            Construct a ThrowsOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.WithOperator">
            <summary>
            Represents a constraint that simply wraps the
            constraint provided as an argument, without any
            further functionality, but which modifes the
            order of evaluation because of its precedence.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.#ctor">
            <summary>
            Constructor for the WithOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that wraps its argument
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllItemsConstraint">
            <summary>
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine 
            constraints.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IResolveConstraint">
            <summary>
            The IConstraintExpression interface is implemented by all
            complete and resolvable constraints and expressions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IResolveConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.UNSET">
            <summary>
            Static UnsetObject used to detect derived constraints
            failing to set the actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.actual">
            <summary>
            The actual value being tested against a constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.displayName">
            <summary>
            The display name of this Constraint for use by ToString()
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.argcnt">
            <summary>
            Argument fields used by ToString();
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.builder">
            <summary>
            The builder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor">
            <summary>
            Construct a constraint with no arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object)">
            <summary>
            Construct a constraint with one argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object,System.Object)">
            <summary>
            Construct a constraint with two arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.SetBuilder(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Sets the ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the constraint and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by an
            ActualValueDelegate that returns the value to be tested.
            The default implementation simply evaluates the delegate
            but derived classes may override it to provide for delayed 
            processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ToString">
            <summary>
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.And">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.With">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Or">
            <summary>
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint.UnsetObject">
            <summary>
            Class used to detect any derived constraints
            that fail to set the actual value in their
            Matches override.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.baseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="resolvable"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct an AllItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryConstraint">
            <summary>
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.Left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.Right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a BinaryConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.Matches(System.Object)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableFromConstraint">
            <summary>
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TypeConstraint">
            <summary>
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.expectedType">
            <summary>
            The expected Type used by the constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.#ctor(System.Type)">
            <summary>
            Construct a TypeConstraint for a given Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. TypeConstraints override this method to write
            the name of the type.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableFromConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned from the specified type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object can be assigned a value of the expected Type, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableToConstraint">
            <summary>
            AssignableToConstraint is used to test that an object
            can be assigned to a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableToConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned to the specified type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object can be assigned a value of the expected Type, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeConstraint">
            <summary>
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.#ctor(System.Type,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Constructs an AttributeConstraint for a specified attriute
            Type and base constraint.
            </summary>
            <param name="type"></param>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.Matches(System.Object)">
            <summary>
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes a description of the attribute to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the actual value supplied to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.GetStringRepresentation">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeExistsConstraint">
            <summary>
            AttributeExistsConstraint tests for the presence of a
            specified attribute on  a Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.#ctor(System.Type)">
            <summary>
            Constructs an AttributeExistsConstraint for a specific attribute Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.Matches(System.Object)">
            <summary>
            Tests whether the object provides the expected attribute.
            </summary>
            <param name="actual">A Type, MethodInfo, or other ICustomAttributeProvider</param>
            <returns>True if the expected attribute is present, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description of the constraint to the specified writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BasicConstraint">
            <summary>
            BasicConstraint is the abstract base for constraints that
            perform a simple comparison to a constant value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            <c>true</c> if the specified enumerable is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
            <summary>
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(System.Object,System.Object)">
            <summary>
            Compares two collection members for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable)">
            <summary>
            Return a new CollectionTally for use in making tests
            </summary>
            <param name="c">The collection to be included in the tally</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a descripton of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentCOnstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionEquivalentConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint">
            <summary>
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.#ctor">
            <summary>
            Construct a CollectionOrderedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.By(System.String)">
            <summary>
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the collection is ordered
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending">
            <summary>
             If used performs a reverse comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionTally">
            <summary>
            CollectionTally counts (tallies) the number of
            occurences of each object in one or more enumerations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.#ctor(NUnit.Framework.Constraints.NUnitEqualityComparer,System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionTally object from a comparer and a collection
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Object)">
            <summary>
            Try to remove an object from the tally
            </summary>
            <param name="o">The object to remove</param>
            <returns>True if successful, false if the object was not found</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Collections.IEnumerable)">
            <summary>
            Try to remove a set of objects from the tally
            </summary>
            <param name="c">The objects to remove</param>
            <returns>True if successful, false if any object was not found</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.Count">
            <summary>
            The number of objects remaining in the tally
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter">
            <summary>
            ComparisonAdapter class centralizes all comparisons of
            values in NUnit, adapting to the use of any provided
            IComparer, IComparer&lt;T&gt; or Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonAdapter.Default">
            <summary>
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a ComparisonAdapter for an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.DefaultComparisonAdapter.#ctor">
            <summary>
            Construct a default ComparisonAdapter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            ComparisonAdapter&lt;T&gt; extends ComparisonAdapter and
            allows use of an IComparer&lt;T&gt; or Comparison&lt;T&gt;
            to actually perform the comparison.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct a ComparisonAdapter for an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.#ctor(System.Comparison{`0})">
            <summary>
            Construct a ComparisonAdapter for a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.lessComparisonResult">
            <summary>
            If true, less than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.equalComparisonResult">
            <summary>
            if true, equal returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.greaterComparisonResult">
            <summary>
            if true, greater than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.predicate">
            <summary>
            The predicate used as a part of the description
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.comparer">
            <summary>
            ComparisonAdapter to be used in making the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
            <param name="value">The value against which to make a comparison.</param>
            <param name="lessComparisonResult">if set to <c>true</c> less succeeds.</param>
            <param name="equalComparisonResult">if set to <c>true</c> equal succeeds.</param>
            <param name="greaterComparisonResult">if set to <c>true</c> greater succeeds.</param>
            <param name="predicate">String used in describing the constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ActualValueDelegate">
            <summary>
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reognized. a ConstraintStack holds 
            input constraints as well as the results of each
            operator applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            </summary>
            <param name="op">The operator to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends the specified constraint to the expresson by pushing
            it on the constraint stack.
            </summary>
            <param name="constraint">The constraint to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SetTopOperatorRightContext(System.Object)">
            <summary>
            Sets the top operator right context.
            </summary>
            <param name="rightContext">The right context.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ReduceOperatorStack(System.Int32)">
            <summary>
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            </summary>
            <param name="targetPrecedence">The target precedence.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve">
            <summary>
            Resolves this instance, returning a Constraint. If the builder
            is not currently in a resolvable state, an exception is thrown.
            </summary>
            <returns>The resolved constraint</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.IsResolvable">
            <summary>
            Gets a value indicating whether this instance is resolvable.
            </summary>
            <value>
            	<c>true</c> if this instance is resolvable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack">
            <summary>
            OperatorStack is a type-safe stack for holding ConstraintOperators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Push(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Pushes the specified operator onto the stack.
            </summary>
            <param name="op">The op.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Pop">
            <summary>
            Pops the topmost operator from the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:OpStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Top">
            <summary>
            Gets the topmost operator without modifying the stack.
            </summary>
            <value>The top.</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack">
            <summary>
            ConstraintStack is a type-safe stack for holding Constraints
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Pushes the specified constraint. As a side effect,
            the constraint's builder field is set to the 
            ConstraintBuilder owning this stack.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop">
            <summary>
            Pops this topmost constrait from the stack.
            As a side effect, the constraint's builder
            field is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:ConstraintStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Top">
            <summary>
            Gets the topmost constraint without modifying the stack.
            </summary>
            <value>The topmost constraint</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpression">
            <summary>
            ConstraintExpression represents a compound constraint in the 
            process of being constructed from a series of syntactic elements.
            
            Individual elements are appended to the expression as they are
            reognized. Once an actual Constraint is appended, the expression
            returns a resolvable Constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpressionBase">
            <summary>
            ConstraintExpressionBase is the abstract base class for the 
            generated ConstraintExpression class, which represents a 
            compound constraint in the process of being constructed 
            from a series of syntactic elements.
            
            NOTE: ConstraintExpressionBase is aware of some of its
            derived classes, which is an apparent violation of 
            encapsulation. Ideally, these classes would be a 
            single class, but they must be separated in order to
            allow parts to be generated under .NET 1.x and to
            provide proper user feedback in syntactically 
            aware IDEs.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintExpressionBase.builder">
            <summary>
            The ConstraintBuilder holding the elements recognized so far
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.ToString">
            <summary>
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends an operator to the expression and returns the
            resulting expression itself.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.SelfResolvingOperator)">
            <summary>
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.With">
            <summary>
            With is currently a NOP - reserved for future use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ContainsConstraint">
            <summary>
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ContainsConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint">
            <summary>
             Applies a delay to the match so that a match can be evaluated in the future.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.Constraint,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint two decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.Constraint,System.Int32,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint two decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <param name="pollingInterval">The time interval used for polling</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by a delegate
            </summary>
            <param name="del">The delegate whose value is to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            Overridden to wait for the specified delay period before
            calling the base constraint with the dereferenced value.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyCollectionConstraint">
            <summary>
            EmptyCollectionConstraint tests whether a collection is empty. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that the collection is empty
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyConstraint">
            <summary>
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyDirectoryConstraint">
            <summary>
            EmptyDirectoryConstraint is used to test that a directory is empty
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyStringConstraint">
            <summary>
            EmptyStringConstraint tests whether a string is empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EndsWithConstraint">
            <summary>
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.StringConstraint">
            <summary>
            StringConstraint is the abstract base for constraints
            that operate on strings. It supports the IgnoreCase
            modifier for string operations.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.expected">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.caseInsensitive">
            <summary>
            Indicates whether tests should be case-insensitive
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor(System.String)">
            <summary>
            Constructs a StringConstraint given an expected value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given string
            </summary>
            <param name="actual">The string to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EndsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraint">
            <summary>
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor. Two objects are 
            considered equal if both are null, or if both have the same 
            value. NUnit has special semantics for some object types.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint.clipStrings">
            <summary>
            If true, strings in error messages will be clipped
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint.comparer">
            <summary>
            NUnitEqualityComparer used to test equality.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)">
            <summary>
            Flag the constraint to use a tolerance when determining equality.
            </summary>
            <param name="amount">Tolerance value to be used</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a failure message. Overridden to provide custom 
            failure messages for EqualConstraint.
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write description of this constraint
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayCollectionDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display the failure information for two collections that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayTypesAndSizes(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Displays a single line showing the types and sizes of the expected
            and actual collections or arrays. If both are identical, the value is 
            only shown once.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection or array</param>
            <param name="actual">The actual collection or array</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayFailurePoint(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint,System.Int32)">
            <summary>
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both values are shown.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected array</param>
            <param name="actual">The actual array</param>
            <param name="failurePoint">Index of the failure point in the underlying collections</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayEnumerableDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Display the failure information for two IEnumerables that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected enumeration.</param>
            <param name="actual">The actual enumeration</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.NoClip">
            <summary>
            Flag the constraint to suppress string clipping 
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.AsCollection">
            <summary>
            Flag the constraint to compare arrays as collections
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ulps">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a distance in representable values (see remarks).
            </summary>
            <returns>Self.</returns>
            <remarks>
            Ulp stands for "unit in the last place" and describes the minimum
            amount a given value can change. For any integers, an ulp is 1 whole
            digit. For floating point values, the accuracy of which is better
            for smaller numbers and worse for larger numbers, an ulp depends
            on the size of the number. Using ulps for comparison of floating
            point results instead of fixed tolerances is safer because it will
            automatically compensate for the added inaccuracy of larger numbers.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Percent">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual values is allowed to deviate from
            the expected value.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Days">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in days.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Hours">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in hours.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Minutes">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in minutes.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Seconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in seconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Milliseconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in milliseconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ticks">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in clock ticks.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter">
            <summary>
            EqualityAdapter class handles all equality comparisons
            that use an IEqualityComparer, IEqualityComparer&lt;T&gt;
            or a ComparisonAdapter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.AreEqual(System.Object,System.Object)">
            <summary>
            Compares two objects, returning true if they are equal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            The base adapter cannot handle IEnumerables except for strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns an EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IEqualityComparer)">
            <summary>
            Returns an EqualityAdapter that wraps an IEqualityComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an EqualityAdapter that wraps an IEqualityComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an EqualityAdapter that wraps an IComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns an EqualityAdapter that wraps a Comparison&lt;T&gt;.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter">
            <summary>
            EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.GenericEqualityAdapter`1.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            Generic adapter requires objects of the specified type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter`1">
            <summary>
            EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountConstraint">
            <summary>
            ExactCountConstraint applies another constraint to each
            item in a collection, succeeding only if a specified
            number of items succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.#ctor(System.Int32,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct an ExactCountConstraint on top of an existing constraint
            </summary>
            <param name="expectedCount"></param>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding only if the expected number of items pass.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactTypeConstraint">
            <summary>
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an ExactTypeConstraint for a given Type
            </summary>
            <param name="type">The expected Type.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.Matches(System.Object)">
            <summary>
            Test that an object is of the exact type specified
            </summary>
            <param name="actual">The actual value.</param>
            <returns>True if the tested object is of the exact type provided, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExceptionTypeConstraint">
            <summary>
            ExceptionTypeConstraint is a special version of ExactTypeConstraint
            used to provided detailed info about the exception thrown in
            an error message.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.#ctor(System.Type)">
            <summary>
            Constructs an ExceptionTypeConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. Overriden to write additional information 
            in the case of an Exception.
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.FalseConstraint">
            <summary>
            FalseConstraint tests that the actual value is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FalseConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics">
            <summary>Helper routines for working with floating point numbers</summary>
            <remarks>
              <para>
                The floating point comparison code is based on this excellent article:
                http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
              </para>
              <para>
                "ULP" means Unit in the Last Place and in the context of this library refers to
                the distance between two adjacent floating point numbers. IEEE floating point
                numbers can only represent a finite subset of natural numbers, with greater
                accuracy for smaller numbers and lower accuracy for very large numbers.
              </para>
              <para>
                If a comparison is allowed "2 ulps" of deviation, that means the values are
                allowed to deviate by up to 2 adjacent floating point values, which might be
                as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Single,System.Single,System.Int32)">
            <summary>Compares two floating point values for equality</summary>
            <param name="left">First floating point value to be compared</param>
            <param name="right">Second floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable floating point values that are allowed to
              be between the left and the right floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Floating point values can only represent a finite subset of natural numbers.
                For example, the values 2.00000000 and 2.00000024 can be stored in a float,
                but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible floating point values are between
                the left and the right number. If the number of possible values between both
                numbers is less than or equal to maxUlps, then the numbers are considered as
                being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Double,System.Double,System.Int64)">
            <summary>Compares two double precision floating point values for equality</summary>
            <param name="left">First double precision floating point value to be compared</param>
            <param name="right">Second double precision floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable double precision floating point values that are
              allowed to be between the left and the right double precision floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Double precision floating point values can only represent a limited series of
                natural numbers. For example, the values 2.0000000000000000 and 2.0000000000000004
                can be stored in a double, but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible double precision floating point
                values are between the left and the right number. If the number of possible
                values between both numbers is less than or equal to maxUlps, then the numbers
                are considered as being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsInt(System.Single)">
            <summary>
              Reinterprets the memory contents of a floating point value as an integer value
            </summary>
            <param name="value">
              Floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the floating point value interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsLong(System.Double)">
            <summary>
              Reinterprets the memory contents of a double precision floating point
              value as an integer value
            </summary>
            <param name="value">
              Double precision floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the double precision floating point value
              interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsFloat(System.Int32)">
            <summary>
              Reinterprets the memory contents of an integer as a floating point value
            </summary>
            <param name="value">Integer value whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer value interpreted as a floating point value
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsDouble(System.Int64)">
            <summary>
              Reinterprets the memory contents of an integer value as a double precision
              floating point value
            </summary>
            <param name="value">Integer whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer interpreted as a double precision
              floating point value
            </returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion">
            <summary>Union of a floating point variable and an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Float">
            <summary>The union's value as a floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Int">
            <summary>The union's value as an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.UInt">
            <summary>The union's value as an unsigned integer</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion">
            <summary>Union of a double precision floating point variable and a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Double">
            <summary>The union's value as a double precision floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Long">
            <summary>The union's value as a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.ULong">
            <summary>The union's value as an unsigned long</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanConstraint">
            <summary>
            Tests whether a value is greater than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
            <summary>
            Tests whether a value is greater than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.InstanceOfTypeConstraint">
            <summary>
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an InstanceOfTypeConstraint for the type provided
            </summary>
            <param name="type">The expected Type</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(System.Object)">
            <summary>
            Test whether an object is of the specified type or a derived type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object is of the provided type or derives from it, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanConstraint">
            <summary>
            Tests whether a value is less than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint">
            <summary>
            Tests whether a value is less than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.MessageWriter">
            <summary>
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.#ctor">
            <summary>
            Construct a MessageWriter given a culture
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message.
            </summary>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the Expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in locating the point where the strings differ</param>
            <param name="clipping">If true, the strings should be clipped to fit the line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteModifier(System.String)">
            <summary>
            Writes the text for a modifier
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.MessageWriter.MaxLineLength">
            <summary>
            Abstract method to get the max line length
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.MsgUtils">
            <summary>
            Static methods used in creating messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.ELLIPSIS">
            <summary>
            Static string used when strings are clipped
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetTypeRepresentation(System.Object)">
            <summary>
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.EscapeControlChars(System.String)">
            <summary>
            Converts any control characters in a string 
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesAsString(System.Int32[])">
            <summary>
            Return the a string representation for a set of indices into an array
            </summary>
            <param name="indices">Array of indices for which a string is needed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesFromCollectionIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Get an array of indices representing the point in a collection or
            array corresponding to a single int index into the collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipString(System.String,System.Int32,System.Int32)">
            <summary>
            Clip a string to a given length, starting at a particular offset, returning the clipped
            string with ellipses representing the removed parts
            </summary>
            <param name="s">The string to be clipped</param>
            <param name="maxStringLength">The maximum permitted length of the result string</param>
            <param name="clipStart">The point at which to start clipping</param>
            <returns>The clipped string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipExpectedAndActual(System.String@,System.String@,System.Int32,System.Int32)">
            <summary>
            Clip the expected and actual strings in a coordinated fashion, 
            so that they may be displayed together.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="maxDisplayLength"></param>
            <param name="mismatch"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FindMismatchPosition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="istart">The index in the strings at which comparison should start</param>
            <param name="ignoreCase">Boolean indicating whether case should be ignored</param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NaNConstraint">
            <summary>
            NaNConstraint tests that the actual value is a double or float NaN
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.Matches(System.Object)">
            <summary>
            Test that the actual value is an NaN
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoItemConstraint">
            <summary>
            NoItemConstraint applies another constraint to each
            item in a collection, failing if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint to be negated.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullConstraint">
            <summary>
            NullConstraint tests that the actual value is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NullConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullOrEmptyStringConstraint">
            <summary>
            NullEmptyStringConstraint tests whether a string is either null or empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.#ctor">
            <summary>
            Constructs a new NullOrEmptyStringConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.Numerics">
            <summary>
            The Numerics class contains common operations on numeric values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Test two numeric values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">A reference to the tolerance in effect</param>
            <returns>True if the values are equal</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.Compare(System.Object,System.Object)">
            <summary>
            Compare two numeric values, performing the usual numeric conversions.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <returns>The relationship of the values to each other</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitComparer">
            <summary>
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitComparer.Default">
            <summary>
            Returns the default NUnitComparer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer">
            <summary>
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.caseInsensitive">
            <summary>
            If true, all string comparisons will ignore case
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.compareAsCollection">
            <summary>
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.externalComparers">
            <summary>
            Comparison objects used in comparisons for some constraints.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.failurePoints">
            <summary>
            List of points at which a failure occured.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Compares two objects for equality within a tolerance.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.ArraysEqual(System.Array,System.Array,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Helper method to compare two arrays
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.DirectoriesEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Method to compare two DirectoryInfo objects
            </summary>
            <param name="x">first directory to compare</param>
            <param name="y">second directory to compare</param>
            <returns>true if equivalent, false if not</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.Default">
            <summary>
            Returns the default NUnitEqualityComparer
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase">
            <summary>
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection">
            <summary>
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.ExternalComparers">
            <summary>
            Gets the list of external comparers to be used to
            test for equality. They are applied to members of
            collections, in place of NUnit's own logic.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoints">
            <summary>
            Gets the list of failure points for the last Match performed.
            The list consists of objects to be interpreted by the caller.
            This generally means that the caller may only make use of
            objects it has placed on the list at a particular depthy.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint">
            <summary>
            FailurePoint class represents one point of failure
            in an equality test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.Position">
            <summary>
            The location of the failure
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedValue">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualValue">
            <summary>
            The actual value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedHasData">
            <summary>
            Indicates whether the expected value is valid
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualHasData">
            <summary>
            Indicates whether the actual value is valid
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.Matches(System.Object)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PathConstraint">
            <summary>
            PathConstraint serves as the abstract base of constraints
            that operate on paths and provides several helper methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.expected">
            <summary>
            The expected path used in the constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.caseInsensitive">
            <summary>
            Flag indicating whether a caseInsensitive comparison should be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.#ctor(System.String)">
            <summary>
            Construct a PathConstraint for a give expected path
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.Canonicalize(System.String)">
            <summary>
            Canonicalize the provided path
            </summary>
            <param name="path"></param>
            <returns>The path in standardized form</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSamePath(System.String,System.String)">
            <summary>
            Test whether two paths are the same
            </summary>
            <param name="path1">The first path</param>
            <param name="path2">The second path</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSamePathOrUnder(System.String,System.String)">
            <summary>
            Test whether one path is the same as or under another path
            </summary>
            <param name="path1">The first path - supposed to be the parent path</param>
            <param name="path2">The second path - supposed to be the child path</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.IgnoreCase">
            <summary>
            Modifies the current instance to be case-insensitve
            and returns it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.RespectCase">
            <summary>
            Modifies the current instance to be case-sensitve
            and returns it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PredicateConstraint`1">
            <summary>
            Predicate constraint wraps a Predicate in a constraint,
            returning success if the predicate is true.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
            Construct a PredicateConstraint from a predicate
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.Matches(System.Object)">
            <summary>
            Determines whether the predicate succeeds when applied
            to the actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description to a MessageWriter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraint">
            <summary>
            PropertyConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.#ctor(System.String,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseConstraint">The constraint to apply to the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyExistsConstraint">
            <summary>
            PropertyExistsConstraint tests that a named property
            exists on the object provided through Match.
            
            Originally, PropertyConstraint provided this feature
            in addition to making optional tests on the vaue
            of the property. The two constraints are now separate.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyExistConstraint"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.Matches(System.Object)">
            <summary>
            Test whether the property exists for a given object
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.RangeConstraint">
            <summary>
            RangeConstraint tests whethe two values are within a 
            specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.#ctor(System.IComparable,System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:RangeConstraint"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ResolvableConstraintExpression">
            <summary>
            ResolvableConstraintExpression is used to represent a compound
            constraint being constructed at a point where the last operator
            may either terminate the expression or may have additional 
            qualifying constraints added to it. 
            
            It is used, for example, for a Property element or for
            an Exception element, either of which may be optionally
            followed by constraints that apply to the property or 
            exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor">
            <summary>
            Create a new instance of ResolvableConstraintExpression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolve the current expression to a Constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.And">
            <summary>
            Appends an And Operator to the expression
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.Or">
            <summary>
            Appends an Or operator to the expression.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            ReusableConstraint wraps a constraint expression after
            resolving it so that it can be reused consistently.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct a ReusableConstraint from a constraint expression
            </summary>
            <param name="c">The expression to be resolved and reused</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.op_Implicit(NUnit.Framework.Constraints.Constraint)~NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            Converts a constraint to a ReusableConstraint
            </summary>
            <param name="c">The constraint to be converted</param>
            <returns>A ReusableConstraint</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SameAsConstraint">
            <summary>
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathConstraint">
            <summary>
            Summary description for SamePathConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SamePathConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathOrUnderConstraint">
            <summary>
            SamePathOrUnderConstraint tests that one path is under another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SamePathOrUnderConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeItemsConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding if any item succeeds.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.StartsWithConstraint">
            <summary>
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StartsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubstringConstraint">
            <summary>
            SubstringConstraint can test whether a string contains
            the expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubstringConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsConstraint">
            <summary>
            ThrowsConstraint is used to test the exception thrown by 
            a delegate by applying a constraint to it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:ThrowsConstraint"/> class,
            using a constraint to be applied to the exception.
            </summary>
            <param name="baseConstraint">A constraint to apply to the caught exception.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.Matches(System.Object)">
            <summary>
            Executes the code of the delegate and captures any exception.
            If a non-null base constraint was provided, it applies that
            constraint to the exception.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown and the constraint succeeds, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            </summary>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.ActualException">
            <summary>
            Get the actual exception thrown - used by Assert.Throws.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsNothingConstraint">
            <summary>
            ThrowsNothingConstraint tests that a delegate does not
            throw an exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True if no exception is thrown, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.Tolerance">
            <summary>
            The Tolerance class generalizes the notion of a tolerance
            within which an equality test succeeds. Normally, it is
            used with numeric types, but it can be used with any
            type that supports taking a difference between two 
            objects and comparing that difference to a value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object)">
            <summary>
            Constructs a linear tolerance of a specdified amount
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object,NUnit.Framework.Constraints.ToleranceMode)">
            <summary>
            Constructs a tolerance given an amount and ToleranceMode
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.CheckLinearAndNumeric">
            <summary>
            Tests that the current Tolerance is linear with a 
            numeric value, throwing an exception if it is not.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Empty">
            <summary>
            Returns an empty Tolerance object, equivalent to 
            specifying an exact match.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Mode">
            <summary>
            Gets the ToleranceMode for the current Tolerance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Value">
            <summary>
            Gets the value of the current Tolerance instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Percent">
            <summary>
            Returns a new tolerance, using the current amount as a percentage.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ulps">
            <summary>
            Returns a new tolerance, using the current amount in Ulps.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Days">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of days.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Hours">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of hours.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Minutes">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of minutes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Seconds">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of seconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Milliseconds">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ticks">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of clock ticks.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.IsEmpty">
            <summary>
            Returns true if the current tolerance is empty.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ToleranceMode">
            <summary>
            Modes in which the tolerance value for a comparison can be interpreted.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.None">
            <summary>
            The tolerance was created with a value, without specifying 
            how the value would be used. This is used to prevent setting
            the mode more than once and is generally changed to Linear
            upon execution of the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Linear">
            <summary>
            The tolerance is used as a numeric range within which
            two compared values are considered to be equal.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Percent">
            <summary>
            Interprets the tolerance as the percentage by which
            the two compared values my deviate from each other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Ulps">
            <summary>
            Compares two values based in their distance in
            representable numbers.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TrueConstraint">
            <summary>
            TrueConstraint tests that the actual value is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrueConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that all items are unique.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.XmlSerializableConstraint">
            <summary>
            BinarySerializableConstraint tests whether 
            an object is serializable in binary format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="T:NUnit.Framework.InconclusiveException">
            <summary>
            Thrown when a test executes inconclusively.
            </summary>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="T:NUnit.Framework.SuccessException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="T:NUnit.Framework.Extensibility.IParameterDataProvider">
            <summary>
            The IDataPointProvider interface is used by extensions
            that provide data for a single test parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Extensibility.IParameterDataProvider.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.IParameterDataProvider.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="T:NUnit.Framework.Extensibility.ISuiteBuilder">
            <summary>
            The ISuiteBuilder interface is exposed by a class that knows how to
            build a suite from one or more Types. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ISuiteBuilder.CanBuildFrom(System.Type)">
            <summary>
            Examine the type and determine if it is suitable for
            this builder to use in building a TestSuite.
            
            Note that returning false will cause the type to be ignored 
            in loading the tests. If it is desired to load the suite
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>True if the type can be used to build a TestSuite</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ISuiteBuilder.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>A TestSuite</returns>
        </member>
        <member name="T:NUnit.Framework.Extensibility.ITestCaseBuilder">
            <summary>
            The ITestCaseBuilder interface is exposed by a class that knows how to
            build a test case from certain methods. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ITestCaseBuilder.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase.
            
            Note that returning false will cause the method to be ignored 
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="method">The test method to examine</param>
            <returns>True is the builder can use this method</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ITestCaseBuilder.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a TestCase from the provided MethodInfo.
            </summary>
            <param name="method">The method to be used as a test case</param>
            <returns>A TestCase or null</returns>
        </member>
        <member name="T:NUnit.Framework.Extensibility.ITestCaseBuilder2">
            <summary>
            ITestCaseBuilder2 extends ITestCaseBuilder with methods
            that include the suite for which the test case is being
            built. Test case builders not needing the suite can
            continue to implement ITestCaseBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ITestCaseBuilder2.CanBuildFrom(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase to be
            included in the suite being populated.
            
            Note that returning false will cause the method to be ignored 
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="method">The test method to examine</param>
            <param name="suite">The suite being populated</param>
            <returns>True is the builder can use this method</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ITestCaseBuilder2.BuildFrom(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a TestCase from the provided MethodInfo for
            inclusion in the suite being constructed.
            </summary>
            <param name="method">The method to be used as a test case</param>
            <param name="suite">The test suite being populated, or null</param>
            <returns>A TestCase or null</returns>
        </member>
        <member name="T:NUnit.Framework.Extensibility.ITestCaseProvider">
            <summary>
            The ITestCaseProvider interface is used by extensions
            that provide data for parameterized tests, along with
            certain flags and other indicators used in the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ITestCaseProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ITestCaseProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Builders.CombinatorialStrategy">
            <summary>
            CombinatorialStrategy creates test cases by using all possible
            combinations of the parameter data.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Builders.CombiningStrategy">
            <summary>
            CombiningStrategy is the abstract base for classes that
            know how to combine values provided for individual test
            parameters to create a set of test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.CombiningStrategy.#ctor(System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Builders.CombiningStrategy"/> 
            class using a set of parameter sources.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:NUnit.Framework.Builders.CombiningStrategy.GetTestCases">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="P:NUnit.Framework.Builders.CombiningStrategy.Sources">
            <summary>
            Gets the sources used by this strategy.
            </summary>
            <value>The sources.</value>
        </member>
        <member name="P:NUnit.Framework.Builders.CombiningStrategy.Enumerators">
            <summary>
            Gets the enumerators for the sources.
            </summary>
            <value>The enumerators.</value>
        </member>
        <member name="M:NUnit.Framework.Builders.CombinatorialStrategy.#ctor(System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Builders.CombinatorialStrategy"/> class.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:NUnit.Framework.Builders.CombinatorialStrategy.GetTestCases">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Builders.CombinatorialTestCaseProvider">
            <summary>
            CombinatorialTestCaseProvider creates test cases from individual
            parameter data values, combining them using the CombiningStrategy
            indicated by an Attribute used on the test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.CombinatorialTestCaseProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>
            True if any cases are available, otherwise false.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Builders.CombinatorialTestCaseProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Builders.CombinatorialTestCaseProvider.GetStrategy(System.Reflection.MethodInfo)">
            <summary>
            Gets the strategy to be used in building test cases for this test.
            </summary>
            <param name="method">The method for which test cases are being built.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Builders.DataAttributeTestCaseProvider">
            <summary>
            DataAttributeTestCaseProvider provides data for methods
            annotated with any DataAttribute. For correct operation,
            any new or custom Attributes must implement one of the 
            following interfaces:
               ITestCaseData
               ITestCaseSource
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.DataAttributeTestCaseProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.DataAttributeTestCaseProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Builders.DatapointProvider">
            <summary>
            Provides data from fields marked with the DatapointAttribute or the
            DatapointsAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.DatapointProvider.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            True if any data is available, otherwise false.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Builders.DatapointProvider.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            An IEnumerable providing the required data
            </returns>
        </member>
        <member name="T:NUnit.Framework.Builders.NUnitTestCaseBuilder">
            <summary>
            Class to build ether a parameterized or a normal NUnitTestMethod.
            There are four cases that the builder must deal with:
              1. The method needs no params and none are provided
              2. The method needs params and they are provided
              3. The method needs no params but they are provided in error
              4. The method needs params but they are not provided
            This could have been done using two different builders, but it
            turned out to be simpler to have just one. The BuildFrom method
            takes a different branch depending on whether any parameters are
            provided, but all four cases are dealt with in lower-level methods
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attriute for this to be true.
            
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
            <param name="method">A MethodInfo for the method being used as a test method</param>
            <returns>True if the builder can create a test case from this method</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <returns>A Test representing one or more method invocations</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.CanBuildFrom(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attriute for this to be true.
            
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
            <param name="method">A MethodInfo for the method being used as a test method</param>
            <param name="parentSuite">The test suite being built, to which the new test would be added</param>
            <returns>True if the builder can create a test case from this method</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.BuildFrom(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <param name="parentSuite">The test fixture being populated, or null</param>
            <returns>A Test representing one or more method invocations</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.BuildParameterizedMethodSuite(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds a ParameterizedMetodSuite containing individual
            test cases for each set of parameters provided for
            this method.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <param name="parentSuite">The test suite for which the method is being built</param>
            <returns>A ParameterizedMethodSuite populated with test cases</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.BuildSingleTestMethod(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test,NUnit.Framework.Internal.ParameterSet)">
            <summary>
            Builds a single NUnitTestMethod, either as a child of the fixture 
            or as one of a set of test cases under a ParameterizedTestMethodSuite.
            </summary>
            <param name="method">The MethodInfo from which to construct the TestMethod</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
            <param name="parms">The ParameterSet to be used, or null</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestCaseBuilder.CheckTestMethodSignature(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Internal.ParameterSet)">
            <summary>
            Helper method that checks the signature of a TestMethod and
            any supplied parameters to determine if the test is valid.
            
            Currently, NUnitTestMethods are required to be public, 
            non-abstract methods, either static or instance,
            returning void. They may take arguments but the values must
            be provided or the TestMethod is not considered runnable.
            
            Methods not meeting these criteria will be marked as
            non-runnable and the method will return false in that case.
            </summary>
            <param name="testMethod">The TestMethod to be checked. If it
            is found to be non-runnable, it will be modified.</param>
            <param name="parms">Parameters to be used for this test, or null</param>
            <returns>True if the method signature is valid, false if not</returns>
        </member>
        <member name="T:NUnit.Framework.Builders.NUnitTestFixtureBuilder">
            <summary>
            Built-in SuiteBuilder for NUnit TestFixture
            </summary>
        </member>
        <member name="F:NUnit.Framework.Builders.NUnitTestFixtureBuilder.fixture">
            <summary>
            The NUnitTestFixture being constructed;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestFixtureBuilder.CanBuildFrom(System.Type)">
            <summary>
            Checks to see if the fixture type has the TestFixtureAttribute
            </summary>
            <param name="type">The fixture type to check</param>
            <returns>True if the fixture can be built, false if not</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestFixtureBuilder.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestFixtureBuilder.AddTestCases(System.Type)">
            <summary>
            Method to add test cases to the newly constructed fixture.
            </summary>
            <param name="fixtureType"></param>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestFixtureBuilder.BuildTestCase(System.Reflection.MethodInfo,NUnit.Framework.Internal.TestSuite)">
            <summary>
            Method to create a test case from a MethodInfo and add
            it to the fixture being built. It first checks to see if
            any global TestCaseBuilder addin wants to build the
            test case. If not, it uses the internal builder
            collection maintained by this fixture builder. After
            building the test case, it applies any decorators
            that have been installed.
            
            The default implementation has no test case builders.
            Derived classes should add builders to the collection
            in their constructor.
            </summary>
            <param name="method">The MethodInfo for which a test is to be created</param>
            <param name="suite">The test suite being built.</param>
            <returns>A newly constructed Test</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestFixtureBuilder.IsValidFixtureType(System.Type,System.String@)">
            <summary>
            Check that the fixture type is valid. This method ensures that 
            the type is not abstract and that there is no more than one of 
            each setup or teardown method and that their signatures are correct.
            </summary>
            <param name="fixtureType">The type of the fixture to check</param>
            <param name="reason">A message indicating why the fixture is invalid</param>
            <returns>True if the fixture is valid, false if not</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.NUnitTestFixtureBuilder.GetTestFixtureAttributes(System.Type)">
            <summary>
            Get TestFixtureAttributes following a somewhat obscure
            set of rules to eliminate spurious duplication of fixtures.
            1. If there are any attributes with args, they are the only
               ones returned and those without args are ignored.
            2. No more than one attribute without args is ever returned.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Builders.PairwiseStrategy">
            <summary>
            PairwiseStrategy creates test cases by combining the parameter
            data so that all possible pairs of data items are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.PairwiseStrategy.#ctor(System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Builders.PairwiseStrategy"/> class.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:NUnit.Framework.Builders.PairwiseStrategy.GetTestCases">
            <summary>
            Gets the test cases generated by this strategy instance.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="M:NUnit.Framework.Builders.PairwiseStrategy.FleaRand.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Builders.PairwiseStrategy.FleaRand"/> class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="T:NUnit.Framework.Builders.ParameterDataProvider">
            <summary>
            ParameterDataProvider supplies individual argument values for
            single parameters using attributes derived from DataAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.ParameterDataProvider.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            True if any data is available, otherwise false.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Builders.ParameterDataProvider.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            An IEnumerable providing the required data
            </returns>
        </member>
        <member name="T:NUnit.Framework.Builders.SequentialStrategy">
            <summary>
            SequentialStrategy creates test cases by using all of the
            parameter data sources in parallel, substituting <c>null</c>
            when any of them run out of data.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Builders.SequentialStrategy.#ctor(System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Builders.SequentialStrategy"/> class.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:NUnit.Framework.Builders.SequentialStrategy.GetTestCases">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand">
            <summary>
            ContextSettingsCommand applies specified changes to the
            TestExecutionContext prior to running a test. No special
            action is needed after the test runs, since the prior
            context will be restored automatically.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.DelegatingTestCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestCommand">
            <summary>
            TestCommand is the abstract base class for all test commands
            in the framework. A TestCommand represents a single stage in
            the execution of a test, e.g.: SetUp/TearDown, checking for
            Timeout, verifying the returned result from a method, etc.
            
            TestCommands may decorate other test commands so that the
            execution of a lower-level command is nested within that
            of a higher level command. All nested commands are executed
            synchronously, as a single unit. Scheduling test execution
            on separate threads is handled at a higher level, using the
            task dispatcher.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestCommand for a test.
            </summary>
            <param name="test">The test to be executed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test in a specified context, returning a TestResult.
            </summary>
            <param name="context">The TestExecutionContext to be used for running the test.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.TestCommand.Test">
            <summary>
            Gets the test associated with this command.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.TestCommand.Children">
            <summary>
            Gets any child TestCommands of this command
            </summary>
            <value>A list of child TestCommands</value>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.DelegatingTestCommand.innerCommand">
            <summary>TODO: Documentation needed for field</summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.DelegatingTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            TODO: Documentation needed for constructor
            </summary>
            <param name="innerCommand"></param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.CommandDecoratorList">
            <summary>
            CommandDecoratorList maintains a list of ICommandDecorators
            and is able to sort them by level so that they are applied
            in the proper order.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.CommandDecoratorList.OrderByStage">
            <summary>
            Order command decorators by the stage at which they apply.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.CommandStage">
            <summary>
            The CommandStage enumeration represents the defined stages
            of execution for a series of TestCommands. The int values
            of the enum are used to apply decorators in the proper 
            order. Lower values are applied first and are therefore
            "closer" to the actual test execution.
            </summary>
            <remarks>
            No CommandStage is defined for actual invocation of the test or
            for creation of the context. Execution may be imagined as 
            proceeding from the bottom of the list upwards, with cleanup
            after the test running in the opposite order.
            </remarks>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.Default">
            <summary>
            Use an application-defined default value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.BelowSetUpTearDown">
            <summary>
            Make adjustments needed before and after running
            the raw test - that is, after any SetUp has run
            and before TearDown.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.SetUpTearDown">
            <summary>
            Run SetUp and TearDown for the test.  This stage is used
            internally by NUnit and should not normally appear
            in user-defined decorators.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.AboveSetUpTearDown">
            <summary>
            Make adjustments needed before and after running 
            the entire test - including SetUp and TearDown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.ExpectedExceptionCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.ExpectedExceptionCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.Api.ExpectedExceptionData)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.ExpectedExceptionCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="exceptionData">The exception data.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.ExpectedExceptionCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext
            </summary>
            <param name="context">The context in which the test is to be run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.ExpectedExceptionCommand.ProcessNoException(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Handles processing when no exception was thrown.
            </summary>
            <param name="context">The execution context.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.ExpectedExceptionCommand.ProcessException(System.Exception,NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Handles processing when an exception was thrown.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The execution context.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.MaxTimeCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.MaxTimeCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.MaxTimeCommand"/> class.
            TODO: Add a comment about where the max time is retrieved.
            </summary>
            <param name="innerCommand">The inner command.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.MaxTimeCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SetUpTearDownDecorator">
            <summary>
            SetUpTearDownDecorator decorates a test command by running
            a setup method before the original command and a teardown
            method after it has executed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SetUpTearDownCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.SetUpTearDownCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SkipCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SkipCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.SkipCommand"/> class.
            </summary>
            <param name="test">The test being skipped.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SkipCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Overridden to simply set the CurrentResult to the
            appropriate Skipped state.
            </summary>
            <param name="context">The execution context for the test</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestMethodCommand">
            <summary>
            TestMethodCommand is the lowest level concrete command
            used to run actual test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestMethodCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TestMethodCommand"/> class.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the execution context, as
            well as returning it. If the test has an expected result, it
            is asserts on that value. Since failed tests and errors throw
            an exception, this command must be wrapped in an outer command,
            will handle that exception and records the failure. This role
            is usually played by the SetUpTearDown command.
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestSuiteCommand">
            <summary>
             TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestSuiteCommand.#ctor(NUnit.Framework.Internal.TestSuite)">
            <summary>
            TODO: Documentation needed for constructor
            </summary>
            <param name="test"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestSuiteCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            TODO: Documentation needed for method
            </summary>
            <param name="context">The execution context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestSuiteCommand.DoOneTimeSetUp(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Does the one time set up for a suite command. Broadly defined,
            this includes:
              1. Applying changes specified by attributes to the context
              2. Constructing the user fixture instance
              3. Calling the one time setup methods themselves
            </summary>
            <param name="context">The execution context to use in running the test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestSuiteCommand.DoOneTimeTearDown(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Does the one time tear down for a suite command.
            </summary>
            <param name="context">The execution context to use in running the test.</param>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ParameterDataProviders.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.ParameterDataProviders.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.TestCaseProviders.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Extensibility.TestCaseProviders.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an enumeration providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.AndFilter">
            <summary>
            Combines multiple filters so that a test must pass all 
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestFilter.Empty">
            <summary>
            Unique Empty filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Pass(NUnit.Framework.Api.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. The default 
            implementation checks the test itself, its parents and any descendants.
            
            Derived classes may override this method or any of the Match methods
            to change the behavior of the filter.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Match(NUnit.Framework.Api.ITest)">
            <summary>
            Determine whether the test itself matches the filter criteria, without
            examining either parents or descendants.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the any parent of the test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.MatchParent(NUnit.Framework.Api.ITest)">
            <summary>
            Determine whether any ancestor of the test matches the filter criteria
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the an ancestor of the test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.MatchDescendant(NUnit.Framework.Api.ITest)">
            <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if at least one descendant matches the filter criteria</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFilter.EmptyFilter">
            <summary>
            Nested class provides an empty filter - one that always
            returns true when called, unless the test is marked explicit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.#ctor">
            <summary>
            Constructs an empty AndFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.#ctor(NUnit.Framework.Api.ITestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Add(NUnit.Framework.Api.ITestFilter)">
            <summary>
            Adds a filter to the list of filters
            </summary>
            <param name="filter">The filter to be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Pass(NUnit.Framework.Api.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Match(NUnit.Framework.Api.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters match, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.CategoryExpression">
            <summary>
            CategoryExpression parses strings representing boolean
            combinations of categories according to the following
            grammar:
              CategoryName ::= string not containing any of ',', '&amp;', '+', '-'
              CategoryFilter ::= CategoryName | CategoryFilter ',' CategoryName
              CategoryPrimitive ::= CategoryFilter | '-' CategoryPrimitive
              CategoryTerm ::= CategoryPrimitive | CategoryTerm '&amp;' CategoryPrimitive
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryExpression.#ctor(System.String)">
            <summary>
            Construct expression from a text string
            </summary>
            <param name="text">The text of the expression</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CategoryExpression.Filter">
            <summary>
            Gets the TestFilter represented by the expression
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.CategoryFilter">
            <summary>
            CategoryFilter is able to select or exclude tests
            based on their categories.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.#ctor">
            <summary>
            Construct an empty CategoryFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.#ctor(System.String)">
            <summary>
            Construct a CategoryFilter using a single category name
            </summary>
            <param name="name">A category name</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.#ctor(System.String[])">
            <summary>
            Construct a CategoryFilter using an array of category names
            </summary>
            <param name="names">An array of category names</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.AddCategory(System.String)">
            <summary>
            Add a category name to the filter
            </summary>
            <param name="name">A category name</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.Match(NUnit.Framework.Api.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.ToString">
            <summary>
            Return the string representation of a category filter
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.NotFilter">
            <summary>
            NotFilter negates the operation of another filter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.#ctor(NUnit.Framework.Api.ITestFilter)">
            <summary>
            Construct a not filter on another filter
            </summary>
            <param name="baseFilter">The filter to be negated</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.Match(NUnit.Framework.Api.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if it matches, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.MatchDescendant(NUnit.Framework.Api.ITest)">
            <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if at least one descendant matches the filter criteria</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.NotFilter.TopLevel">
            <summary>
            Indicates whether this is a top-level NotFilter,
            requiring special handling of Explicit
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.NotFilter.BaseFilter">
            <summary>
            Gets the base filter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.OrFilter">
            <summary>
            Combines multiple filters so that a test must pass one 
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.#ctor">
            <summary>
            Constructs an empty OrFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.#ctor(NUnit.Framework.Api.ITestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Add(NUnit.Framework.Api.ITestFilter)">
            <summary>
            Adds a filter to the list of filters
            </summary>
            <param name="filter">The filter to be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Pass(NUnit.Framework.Api.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Match(NUnit.Framework.Api.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.OrFilter.Filters">
            <summary>
            Return an array of the composing filters
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.SimpleNameFilter">
            <summary>
            SimpleName filter selects tests based on their name
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.SimpleNameFilter.#ctor">
            <summary>
            Construct an empty SimpleNameFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.SimpleNameFilter.#ctor(System.String)">
            <summary>
            Construct a SimpleNameFilter for a single name
            </summary>
            <param name="nameToAdd">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.SimpleNameFilter.#ctor(System.String[])">
            <summary>
            Construct a SimpleNameFilter for an array of names
            </summary>
            <param name="namesToAdd">The names the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.SimpleNameFilter.Add(System.String)">
            <summary>
            Add a name to a SimpleNameFilter
            </summary>
            <param name="name">The name to be added.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.SimpleNameFilter.Match(NUnit.Framework.Api.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if it matches, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestCaseResult">
            <summary>
            Represents the result of running a single test case.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestResult">
            <summary>
            The TestResult class represents the result of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.resultState">
            <summary>
            Indicates the result of the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.time">
            <summary>
            The elapsed time for executing this test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.test">
            <summary>
            The test that this result pertains to
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.stackTrace">
            <summary>
            The stacktrace at the point of failure
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.message">
            <summary>
            Message giving the reason for failure, error or skipping the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.assertCount">
            <summary>
            Number of asserts executed by this test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.children">
            <summary>
            List of child results
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.#ctor(NUnit.Framework.Api.ITest)">
            <summary>
            Construct a test result given a Test
            </summary>
            <param name="test">The test to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.ToXml(System.Boolean)">
            <summary>
            Returns the Xml representation of the result.
            </summary>
            <param name="recursive">If true, descendant results are included</param>
            <returns>An XmlNode representing the result</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddToXml(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Adds the XML representation of the result as a child of the
            supplied parent node..
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddResult(NUnit.Framework.Internal.TestResult)">
            <summary>
            Add a child result
            </summary>
            <param name="result">The child result to be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Api.ResultState)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Api.ResultState,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="message">A message associated with the result state</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Api.ResultState,System.String,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="message">A message associated with the result state</param>
            <param name="stackTrace">Stack trace giving the location of the command</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordException(System.Exception,NUnit.Framework.Internal.FailureSite)">
            <summary>
            Set the test result based on the type of exception thrown
            and the site of the Failure.
            </summary>
            <param name="ex">The exception that was thrown</param>
            <param name="site">The FailureSite</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordException(System.Exception)">
            <summary>
            Set the test result based on the type of exception thrown
            </summary>
            <param name="ex">The exception that was thrown</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddReasonElement(NUnit.Framework.Api.XmlNode)">
            <summary>
            Adds a reason element to a node and returns it.
            </summary>
            <param name="targetNode">The target node.</param>
            <returns>The new reason element.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddFailureElement(NUnit.Framework.Api.XmlNode)">
            <summary>
            Adds a failure element to a node and returns it.
            </summary>
            <param name="targetNode">The target node.</param>
            <returns>The new failure element.</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Test">
            <summary>
            Gets the test with which this result is associated.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Time">
            <summary>
            Gets or sets the elapsed time for running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an
            error or failure. Not available in
            the Compact Framework 1.0.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.AssertCount">
            <summary>
            Gets or sets the count of asserts executed
            when running the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            Test HasChildren before accessing Children to avoid
            the creation of an empty collection.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Children">
            <summary>
            Gets the collection of child results.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseResult.#ctor(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Construct a TestCaseResult based on a TestMethod
            </summary>
            <param name="test">A TestMethod to which the result applies.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.FailureSite">
            <summary>
            The FailureSite enum indicates the stage of a test
            in which an error or failure occured.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.FailureSite.Test">
            <summary>
            Failure in the test itself
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.FailureSite.SetUp">
            <summary>
            Failure in the SetUp method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.FailureSite.TearDown">
            <summary>
            Failure in the TearDown method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.FailureSite.Parent">
            <summary>
            Failure of a parent test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.FailureSite.Child">
            <summary>
            Failure of a child test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestSuiteResult">
            <summary>
            Represents the result of running a test suite
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.#ctor(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Construct a TestSuiteResult base on a TestSuite
            </summary>
            <param name="suite">The TestSuite to which the result applies</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.AddResult(NUnit.Framework.Internal.TestResult)">
            <summary>
            Add a child result
            </summary>
            <param name="result">The child result to be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.RecordException(System.Exception,NUnit.Framework.Internal.FailureSite)">
            <summary>
            Set the test result based on the type of exception thrown
            and the site of the Failure.
            </summary>
            <param name="ex">The exception that was thrown</param>
            <param name="site">The FailureSite</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterizedFixtureSuite">
            <summary>
            ParameterizedFixtureSuite serves as a container for the set of test 
            fixtures created from a given Type using various parameters.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestSuite">
            <summary>
            TestSuite represents a composite test, which contains other tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Test">
            <summary>
            The Test abstract class represents a test within the framework.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.nextID">
            <summary>
            Static value to seed ids. It's started at 1000 so any
            uninitialized ids will stand out.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.runState">
            <summary>
            Indicates whether the test should be executed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.parent">
            <summary>
            Test suite containing this test, or null
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.fixtureType">
            <summary>
            The System.Type of the fixture for this test, if there is one
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.fixture">
            <summary>
            The fixture object, if it has been created
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.attributes">
            <summary>
            NUnitAttributes applied to the method, class or assembly
            used to implement this test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.setUpMethods">
            <summary>
            The SetUp methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.tearDownMethods">
            <summary>
            The teardown method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.requiresThread">
            <summary>
            True if the test should run on its own thread
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.String)">
            <summary>
            Constructs a test given its name
            </summary>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.String,System.String)">
            <summary>
            Constructs a test given the path through the
            test hierarchy to its parent and a name.
            </summary>
            <param name="pathName">The parent tests full name</param>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.Type)">
            <summary>
             TODO: Documentation needed for constructor
            </summary>
            <param name="fixtureType"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ToXml(System.Boolean)">
            <summary>
            Returns the Xml representation of the test
            </summary>
            <param name="recursive">If true, include child tests recursively</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.AddToXml(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.CompareTo(System.Object)">
            <summary>
            Compares this test to another test for sorting purposes
            </summary>
            <param name="obj">The other test</param>
            <returns>Value of -1, 0 or +1 depending on whether the current test is less than, equal to or greater than the other test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.MakeTestResult">
            <summary>
            Creates a TestResult for this test.
            </summary>
            <returns>A TestResult suitable for this type of test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.GetTestCommand">
            <summary>
            Gets a test command to be used in executing this test
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ApplyAttributesToTest(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Modify a newly constructed test by applying any of NUnit's common
            attributes, based on a supplied ICustomAttributeProvider, which is
            usually the reflection element from which the test was constructed,
            but may not be in some instances. The attributes retrieved are 
            saved for use in subsequent operations.
            </summary>
            <param name="provider">An object implementing ICustomAttributeProvider</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.MakeTestCommand">
            <summary>
            Make a test command for running this test
            </summary>
            <returns>A TestCommand, which runs the test when executed.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.PopulateTestNode(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Add standard attributes and members to a test node.
            </summary>
            <param name="thisNode"></param>
            <param name="recursive"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Id">
            <summary>
            Gets or sets the id of the test
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Name">
            <summary>
            Gets or sets the name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.FullName">
            <summary>
            Gets or sets the fully qualified name of the test
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.FixtureType">
            <summary>
            Gets the Type of the fixture used in running this test
            or null if no fixture type is associated with it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.RunState">
            <summary>
            Whether or not the test should be run
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TestType">
            <summary>
            Gets a string representing the type of test. Used as an attribute
            value in the XML representation of a test and has no other
            function in the framework.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TestCaseCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Properties">
            <summary>
            Gets the properties for this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Parent">
            <summary>
            Gets the parent as a Test object.
            Used by the core to set the parent.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Fixture">
            <summary>
            Gets or sets a fixture object for running this test.
            Provided for use by LegacySuiteBuilder.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.SetUpMethods">
            <summary>
            Gets the set up methods.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TearDownMethods">
            <summary>
            Gets the tear down methods.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.tests">
            <summary>
            Our collection of child tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.maintainTestOrder">
            <summary>
            Set to true to suppress sorting this suite's contents
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.oneTimeSetUpMethods">
            <summary>
            The fixture setup methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.oneTimeTearDownMethods">
            <summary>
            The fixture teardown methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.arguments">
            <summary>
            Argument list for use in creating the fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="name">The name of the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="parentSuiteName">Name of the parent suite.</param>
            <param name="name">The name of the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Sort">
            <summary>
            Sorts tests under this suite.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Add(NUnit.Framework.Internal.Test)">
            <summary>
            Adds a test to the suite.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.MakeTestResult">
            <summary>
            Overridden to return a TestSuiteResult.
            </summary>
            <returns>A TestResult for this test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.MakeTestCommand">
            <summary>
            Creates a test command for this suite.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.AddToXml(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>The list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.TestCaseCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.OneTimeSetUpMethods">
            <summary>
            Gets the set up methods.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.OneTimeTearDownMethods">
            <summary>
            Gets the tear down methods.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedFixtureSuite.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.ParameterizedFixtureSuite"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedFixtureSuite.ParameterizedType">
            <summary>
            Gets the Type represented by this suite.
            </summary>
            <value>A Sysetm.Type.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedFixtureSuite.TestType">
            <summary>
            Gets a string representing the type of test
            </summary>
            <value></value>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterizedMethodSuite">
            <summary>
            ParameterizedMethodSuite holds a collection of individual
            TestMethods with their arguments applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedMethodSuite.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Construct from a MethodInfo
            </summary>
            <param name="method"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedMethodSuite.Method">
            <summary>
            Gets the MethodInfo for which this suite is being built.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedMethodSuite.TestType">
            <summary>
            Gets a string representing the type of test
            </summary>
            <value></value>
        </member>
        <member name="T:NUnit.Framework.Internal.TestAssembly">
            <summary>
            TestAssembly is a TestSuite that represents the execution
            of tests in a managed assembly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestAssembly"/> class.
            </summary>
            <param name="assembly">The assembly containing the tests.</param>
            <param name="path">The path used to load the assembly.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestAssembly.TestType">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFixture">
            <summary>
            TestFixture is a surrogate for a user test fixture class,
            containing one or more tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixture.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestFixture"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixture.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestFixture"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TestMethod">
            <summary>
            The TestMethod class represents a Test implemented as a method.
            Because of how exceptions are handled internally, this class
            must incorporate processing of expected exceptions. A change to
            the Test interface might make it easier to process exceptions
            in an object that aggregates a TestMethod in the future.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestMethod.method">
            <summary>
            The test method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestMethod.decorators">
            <summary>
            A list of all decorators applied to the test by attributes or parameterset arguments
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestMethod.parms">
            <summary>
            The ParameterSet used to create this test method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestMethod"/> class.
            </summary>
            <param name="method">The method to be used as a test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.#ctor(System.Reflection.MethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestMethod"/> class.
            </summary>
            <param name="method">The method to be used as a test.</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.MakeTestResult">
            <summary>
            Overridden to return a TestCaseResult.
            </summary>
            <returns>A TestResult for this test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.AddToXml(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.MakeTestCommand">
            <summary>
            Creates a test command for use in running this test. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method that performs the test.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.CustomDecorators">
            <summary>
            Gets a list of custom decorators for this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.WorkItems.CompositeWorkItem">
            <summary>
            A CompositeWorkItem represents a test suite and
            encapsulates the execution of the suite as well
            as all its child tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.WorkItems.WorkItem">
            <summary>
            A WorkItem may be an individual test case, a fixture or
            a higher level grouping of tests. All WorkItems inherit
            from the abstract WorkItem class, which uses the template
            pattern to allow derived classes to perform work in
            whatever way is needed.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.WorkItems.WorkItem.testResult">
            <summary>
            The result of running the test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.WorkItem.#ctor(NUnit.Framework.Internal.Test,NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Construct a WorkItem for a particular test.
            </summary>
            <param name="test">The test that the WorkItem will run</param>
            <param name="context">The context to be used for running this test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.WorkItem.Execute">
            <summary>
            Execute the current work item, including any
            child work items.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.WorkItem.PerformWork">
            <summary>
            Method that performs actually performs the work. It should
            set the State to WorkItemState.Complete when done.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.WorkItem.WorkItemComplete">
            <summary>
            Method called by the derived class when all work is complete
            </summary>
        </member>
        <member name="E:NUnit.Framework.Internal.WorkItems.WorkItem.Completed">
            <summary>
            Event triggered when the item is complete
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.WorkItems.WorkItem.State">
            <summary>
            Gets the current state of the WorkItem
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.WorkItems.WorkItem.Test">
            <summary>
            The test being executed by the work item
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.WorkItems.WorkItem.Context">
            <summary>
            The execution context in use
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.WorkItems.WorkItem.PriorContext">
            <summary>
            The original context supplied from the fixture
            or other higher-level test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.WorkItems.WorkItem.Command">
            <summary>
            The command used to run the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.WorkItems.WorkItem.Result">
            <summary>
            The test result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.CompositeWorkItem.#ctor(NUnit.Framework.Internal.TestSuite,NUnit.Framework.Internal.TestExecutionContext,NUnit.Framework.Api.ITestFilter)">
            <summary>
            Construct a CompositeWorkItem for executing a test suite
            using a filter to select child tests.
            </summary>
            <param name="suite">The TestSuite to be executed</param>
            <param name="context">The execution context in which to run the suite</param>
            <param name="childFilter">A filter used to select child tests</param>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.CompositeWorkItem.PerformWork">
            <summary>
            Method that actually performs the work. Overridden
            in CompositeWorkItem to do setup, run all child
            items and then do teardown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.WorkItems.CountdownEvent">
            <summary>
            A simplified implementation of .NET 4 CountdownEvent
            for use in earlier versions of .NET. Only the methods
            used by NUnit are implemented.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.CountdownEvent.#ctor(System.Int32)">
            <summary>
            Construct a CountdownEvent
            </summary>
            <param name="initialCount">The initial count</param>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.CountdownEvent.Signal">
            <summary>
            Decrement the count by one
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.CountdownEvent.Wait">
            <summary>
            Block the thread until the count reaches zero
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.WorkItems.SimpleWorkItem">
            <summary>
            A SimpleWorkItem represents a single test case and is
            marked as completed immediately upon execution. This
            class is also used for skipped or ignored test suites.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.SimpleWorkItem.#ctor(NUnit.Framework.Internal.Test,NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Construct a simple work item for a test.
            </summary>
            <param name="test">The test to be executed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.WorkItems.SimpleWorkItem.PerformWork">
            <summary>
            Method that performs actually performs the work.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.WorkItems.WorkItemState">
            <summary>
            The current state of a work item
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.WorkItems.WorkItemState.Ready">
            <summary>
            Ready to run or continue
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.WorkItems.WorkItemState.Waiting">
            <summary>
            Waiting for a dependency to complete
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.WorkItems.WorkItemState.Complete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.CultureDetector">
            <summary>
            CultureDetector is a helper class used by NUnit to determine
            whether a test should be run based on the current culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.#ctor">
            <summary>
            Default constructor uses the current culutre.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.#ctor(System.String)">
            <summary>
            Contruct a CultureDetector for a particular culture for testing.
            </summary>
            <param name="culture">The culture to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of culturess
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(NUnit.Framework.CultureAttribute)">
            <summary>
            Tests to determine if the current culture is supported
            based on a culture attribute.
            </summary>
            <param name="cultureAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture names</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.CultureDetector.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ExceptionHelper">
            <summary>
            ExceptionHelper provides static methods for working with exceptions
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.BuildMessage(System.Exception)">
            <summary>
            Builds up a message, using the Message field of the specified exception
            as well as any InnerExceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A combined message string.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.BuildStackTrace(System.Exception)">
            <summary>
            Builds up a message, using the Message field of the specified exception
            as well as any InnerExceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A combined stack trace.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.IApplyToContext">
            <summary>
            The IApplyToContext interface is implemented by attributes
            that want to make changes to the execution context before
            a test is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.IApplyToContext.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Apply changes to the execution context
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="T:NUnit.Framework.Internal.InvalidTestFixtureException">
            <summary>
            InvalidTestFixtureException is thrown when an appropriate test
            fixture constructor using the provided arguments cannot be found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.MethodHelper">
            <summary>
            MethodHelper provides static methods for working with methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodHelper.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Gets the display name for a method as used by NUnit.
            </summary>
            <param name="method">The method for which a display name is needed.</param>
            <param name="arglist">The arguments provided.</param>
            <returns>The display name for the method</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.NUnitException">
            <summary>
            Thrown when an assertion failed. Here to preserve the inner
            exception and hence its stack trace.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="T:NUnit.Framework.Internal.NUnitLiteTestAssemblyBuilder">
            <summary>
            DefaultTestAssemblyBuilder loads a single assembly and builds a TestSuite
            containing test fixtures present in the assembly.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.NUnitLiteTestAssemblyBuilder.assembly">
            <summary>
            The loaded assembly
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitLiteTestAssemblyBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyBuilder.Build(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests from a provided assembly
            </summary>
            <param name="assembly">The assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>
            A TestSuite containing the tests found in the assembly
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyBuilder.Build(System.String,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests given the filename of an assembly
            </summary>
            <param name="assemblyName">The filename of the assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>
            A TestSuite containing the tests found in the assembly
            </returns>
        </member>
        <member name="T:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner">
            <summary>
            Default implementation of ITestAssemblyRunner
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner.#ctor(NUnit.Framework.Api.ITestAssemblyBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner.Load(System.String,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly
            </summary>
            <param name="assemblyName">File name of the assembly to load</param>
            <param name="settings">Dictionary of option settings for loading the assembly</param>
            <returns>True if the load was successful</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner.Load(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly
            </summary>
            <param name="assembly">The assembly to load</param>
            <param name="settings">Dictionary of option settings for loading the assembly</param>
            <returns>True if the load was successful</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner.Run(NUnit.Framework.Api.ITestListener,NUnit.Framework.Api.ITestFilter)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.NUnitLiteTestAssemblyRunner.LoadedTest">
            <summary>
            TODO: Documentation needed for property
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.OSPlatform">
            <summary>
            OSPlatform represents a particular operating system platform
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.UnixPlatformID_Microsoft">
            <summary>
            Platform ID for Unix as defined by Microsoft .NET 2.0 and greater
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.UnixPlatformID_Mono">
            <summary>
            Platform ID for Unix as defined by Mono
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.OSPlatform.#ctor(System.PlatformID,System.Version)">
            <summary>
            Construct from a platform ID and version
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.OSPlatform.#ctor(System.PlatformID,System.Version,NUnit.Framework.Internal.OSPlatform.ProductType)">
            <summary>
            Construct from a platform ID, version and product type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.CurrentPlatform">
            <summary>
            Get the OSPlatform under which we are currently running
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.Platform">
            <summary>
            Get the platform ID of this instance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.Version">
            <summary>
            Get the Version of this instance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.Product">
            <summary>
            Get the Product Type of this instance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows">
            <summary>
            Return true if this is a windows platform
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsUnix">
            <summary>
            Return true if this is a Unix or Linux platform
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin32S">
            <summary>
            Return true if the platform is Win32S
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin32Windows">
            <summary>
            Return true if the platform is Win32Windows
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin32NT">
            <summary>
             Return true if the platform is Win32NT
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWinCE">
            <summary>
            Return true if the platform is Windows CE
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin95">
            <summary>
            Return true if the platform is Windows 95
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin98">
            <summary>
            Return true if the platform is Windows 98
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWinME">
            <summary>
            Return true if the platform is Windows ME
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT3">
            <summary>
            Return true if the platform is NT 3
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT4">
            <summary>
            Return true if the platform is NT 4
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT5">
            <summary>
            Return true if the platform is NT 5
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2K">
            <summary>
            Return true if the platform is Windows 2000
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWinXP">
            <summary>
            Return true if the platform is Windows XP
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2003Server">
            <summary>
            Return true if the platform is Windows 2003 Server
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT6">
            <summary>
            Return true if the platform is NT 6
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsVista">
            <summary>
            Return true if the platform is Vista
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2008Server">
            <summary>
            Return true if the platform is Windows 2008 Server (original or R2)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2008ServerR1">
            <summary>
            Return true if the platform is Windows 2008 Server (original)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2008ServerR2">
            <summary>
            Return true if the platform is Windows 2008 Server R2
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2012Server">
            <summary>
            Return true if the platform is Windows 2012 Server
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows7">
            <summary>
            Return true if the platform is Windows 7
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows8">
            <summary>
            Return true if the platform is Windows 8
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.OSPlatform.ProductType">
            <summary>
            Product Type Enumeration used for Windows
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.Unknown">
            <summary>
            Product type is unknown or unspecified
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.WorkStation">
            <summary>
            Product type is Workstation
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.DomainController">
            <summary>
            Product type is Domain Controller
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.Server">
            <summary>
            Product type is Server
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterSet">
            <summary>
            ParameterSet encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.ParameterSet.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterSet.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterSet.#ctor">
            <summary>
            Construct an empty parameter set, which
            defaults to being Runnable.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterSet.#ctor(NUnit.Framework.Api.ITestCaseData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterSet.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Applies ParameterSet values to the test itself.
            </summary>
            <param name="test">A test.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.RunState">
            <summary>
            The RunState for this set of parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.Arguments">
            <summary>
            The arguments to be used in running the test,
            which must match the method signature.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.OriginalArguments">
            <summary>
            The original arguments provided by the user,
            used for display purposes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.ExceptionExpected">
            <summary>
            Gets a flag indicating whether an exception is expected.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.ExceptionData">
            <summary>
            Data about any expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.ExpectedResult">
            <summary>
            The expected result of the test, which
            must match the method return type.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.HasExpectedResult">
            <summary>
            Gets a value indicating whether an expected result was specified.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.TestName">
            <summary>
            A name to be used for this test case in lieu
            of the standard generated name containing
            the argument list.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterSet.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PlatformHelper">
            <summary>
            PlatformHelper class is used by the PlatformAttribute class to 
            determine whether a platform is supported.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PlatformHelper.OSPlatforms">
            <summary>
            Comma-delimited list of all supported OS platform constants
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PlatformHelper.RuntimePlatforms">
            <summary>
            Comma-delimited list of all supported Runtime platform constants
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.#ctor">
            <summary>
            Default constructor uses the operating system and
            common language runtime of the system.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.#ctor(NUnit.Framework.Internal.OSPlatform,NUnit.Framework.Internal.RuntimeFramework)">
            <summary>
            Contruct a PlatformHelper for a particular operating
            system and common language runtime. Used in testing.
            </summary>
            <param name="os">OperatingSystem to be used</param>
            <param name="rt">RuntimeFramework to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of platforms
            is being used currently.
            </summary>
            <param name="platforms"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(NUnit.Framework.PlatformAttribute)">
            <summary>
            Tests to determine if the current platform is supported
            based on a platform attribute.
            </summary>
            <param name="platformAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(System.String)">
            <summary>
            Test to determine if the a particular platform or comma-
            delimited set of platforms is in use.
            </summary>
            <param name="platform">Name of the platform or comma-separated list of platform names</param>
            <returns>True if the platform is in use on the system</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.PlatformHelper.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyBag">
            <summary>
            A PropertyBag represents a collection of name value pairs
            that allows duplicate entries with the same key. Methods
            are provided for adding a new pair as well as for setting
            a key to a single value. All keys are strings but values
            may be of any type. Null values are not permitted, since
            a null entry represents the absence of the key.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the property set
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value for a key, removing any other
            values that are already in the property set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple values are present and returning
            null if the value is not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.GetSetting(System.String,System.Boolean)">
            <summary>
            Gets a single boolean value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.GetSetting(System.String,System.String)">
            <summary>
            Gets a single string value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.GetSetting(System.String,System.Int32)">
            <summary>
            Gets a single int value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.GetSetting(System.String,System.Enum)">
            <summary>
            Gets a single Enum value for a key, using the first
            one if multiple values are present and returning the
            default value if no entry is found.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Remove(System.String)">
            <summary>
            Removes all entries for a key from the property set
            </summary>
            <param name="key">The key for which the entries are to be removed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Remove(System.String,System.Object)">
            <summary>
            Removes a single entry if present. If not found,
            no error occurs.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Remove(NUnit.Framework.Api.PropertyEntry)">
            <summary>
            Removes a specific PropertyEntry. If the entry is not
            found, no errr occurs.
            </summary>
            <param name="entry">The property entry to remove</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.ContainsKey(System.String)">
            <summary>
            Gets a flag indicating whether the specified key has
            any entries in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <returns>
            True if their are values present, otherwise false
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Contains(System.String,System.Object)">
            <summary>
            Gets a flag indicating whether the specified key and
            value are present in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <param name="value">The value to be checked</param>
            <returns>
            True if the key and value are present, otherwise false
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Contains(NUnit.Framework.Api.PropertyEntry)">
            <summary>
            Gets a flag indicating whether the specified key and
            value are present in the property set.
            </summary>
            <param name="entry">The property entry to be checked</param>
            <returns>
            True if the entry is present, otherwise false
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.GetEnumerator">
            <summary>
            Gets an enumerator for all properties in the property bag
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.ToXml(System.Boolean)">
            <summary>
            Returns an XmlNode representating the current PropertyBag.
            </summary>
            <param name="recursive">Not used</param>
            <returns>An XmlNode representing the PropertyBag</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.AddToXml(NUnit.Framework.Api.XmlNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the PropertyBag after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">Not used</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Count">
            <summary>
            Get the number of key/value pairs in the property set
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of values for a particular key
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyBag.PropertyBagEnumerator">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.PropertyBagEnumerator.#ctor(NUnit.Framework.Internal.PropertyBag)">
            <summary>
            
            </summary>
            <param name="bag"></param>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyNames">
            <summary>
            The PropertyNames class provides static constants for the
            standard property names that NUnit uses on tests.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Description">
            <summary>
            The Description of a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SkipReason">
            <summary>
            The reason a test was not run
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ProviderStackTrace">
            <summary>
            The stack trace from any data provider that threw
            an exception.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SetCulture">
            <summary>
            The culture to be set for a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SetUICulture">
            <summary>
            The UI culture to be set for a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Category">
            <summary>
            The categories applying to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Timeout">
            <summary>
            The timeout value for the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.RepeatCount">
            <summary>
            The number of times the test should be repeated
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.MaxTime">
            <summary>
            The maximum time in ms, above which the test is considered to have failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.JoinType">
            <summary>
            The selected strategy for joining parameter data into test cases
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ProcessID">
            <summary>
            The process ID of the executing assembly
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.AppDomain">
            <summary>
            The FriendlyName of the AppDomain in which the assembly is running
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Randomizer">
            <summary>
            Randomizer returns a set of random values in a repeatable
            way, to allow re-running of tests if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.MemberInfo)">
            <summary>
            Get a randomizer for a particular member, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.ParameterInfo)">
            <summary>
            Get a randomizer for a particular parameter, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.#ctor">
            <summary>
            Construct a randomizer using a random seed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.#ctor(System.Int32)">
            <summary>
            Construct a randomizer using a specified seed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetDoubles(System.Int32)">
            <summary>
            Return an array of random doubles between 0.0 and 1.0.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetEnums(System.Int32,System.Type)">
            <summary>
            Return an array of random Enums
            </summary>
            <param name="count"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetDoubles(System.Double,System.Double,System.Int32)">
            <summary>
            Return an array of random doubles with values in a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an array of random ints with values in a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Randomizer.RandomSeed">
            <summary>
            Get a random seed for use in creating a randomizer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Reflect">
            <summary>
            Helper methods for inspecting a type by reflection. 
            
            Many of these methods take ICustomAttributeProvider as an 
            argument to avoid duplication, even though certain attributes can 
            only appear on specific types of members, like MethodInfo or Type.
            
            In the case where a type is being examined for the presence of
            an attribute, interface or named member, the Reflect methods
            operate with the full name of the member being sought. This
            removes the necessity of the caller having a reference to the
            assembly that defines the item being sought and allows the
            NUnit core to inspect assemblies that reference an older
            version of the NUnit framework.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetMethodsWithAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Examine a fixture type and return an array of methods having a 
            particular attribute. The array is order with base methods first.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <param name="inherit">Specifies whether to search the fixture type inheritance chain</param>
            <returns>The array of methods found</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.HasMethodWithAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Examine a fixture type and return true if it has a method with
            a particular attribute. 
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <param name="inherit">Specifies whether to search the fixture type inheritance chain</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.Construct(System.Type)">
            <summary>
            Invoke the default constructor on a Type
            </summary>
            <param name="type">The Type to be constructed</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.Construct(System.Type,System.Object[])">
            <summary>
            Invoke a constructor on a Type with arguments
            </summary>
            <param name="type">The Type to be constructed</param>
            <param name="arguments">Arguments to the constructor</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetTypeArray(System.Object[])">
            <summary>
            Returns an array of types from an array of objects.
            Used because the compact framework doesn't support
            Type.GetTypeArray()
            </summary>
            <param name="objects">An array of objects</param>
            <returns>An array of Types</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invoke a method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.RuntimeType">
            <summary>
            Enumeration identifying a common language
            runtime implementation.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.Any">
            <summary>Any supported runtime framework</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.Net">
            <summary>Microsoft .NET Framework</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.NetCF">
            <summary>Microsoft .NET Compact Framework</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.SSCLI">
            <summary>Microsoft Shared Source CLI</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.Mono">
            <summary>Mono</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.MonoTouch">
            <summary>MonoTouch</summary>
        </member>
        <member name="T:NUnit.Framework.Internal.RuntimeFramework">
            <summary>
            RuntimeFramework represents a particular version
            of a common language runtime implementation.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeFramework.DefaultVersion">
            <summary>
            DefaultVersion is an empty Version, used to indicate that
            NUnit should select the CLR version to use for the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.#ctor(NUnit.Framework.Internal.RuntimeType,System.Version)">
            <summary>
            Construct from a runtime type and version
            </summary>
            <param name="runtime">The runtime type of the framework</param>
            <param name="version">The version of the framework</param>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.Parse(System.String)">
            <summary>
            Parses a string representing a RuntimeFramework.
            The string may be just a RuntimeType name or just
            a Version or a hyphentated RuntimeType-Version or
            a Version prefixed by 'v'.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.GetBestAvailableFramework(NUnit.Framework.Internal.RuntimeFramework)">
            <summary>
            Returns the best available framework that matches a target framework.
            If the target framework has a build number specified, then an exact
            match is needed. Otherwise, the matching framework with the highest
            build number is used.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.ToString">
            <summary>
            Overridden to return the short name of the framework
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.Supports(NUnit.Framework.Internal.RuntimeFramework)">
            <summary>
            Returns true if the current framework matches the
            one supplied as an argument. Two frameworks match
            if their runtime types are the same or either one
            is RuntimeType.Any and all specified version components
            are equal. Negative (i.e. unspecified) version
            components are ignored.
            </summary>
            <param name="target">The RuntimeFramework to be matched.</param>
            <returns>True on match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.CurrentFramework">
            <summary>
            Static method to return a RuntimeFramework object
            for the framework that is currently in use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.AvailableFrameworks">
            <summary>
            Gets an array of all available frameworks
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.IsAvailable">
            <summary>
            Returns true if the current RuntimeFramework is available.
            In the current implementation, only Mono and Microsoft .NET
            are supported.
            </summary>
            <returns>True if it's available, false if not</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.Runtime">
            <summary>
            The type of this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.FrameworkVersion">
            <summary>
            The framework version for this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.ClrVersion">
            <summary>
            The CLR version for this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.AllowAnyVersion">
            <summary>
            Return true if any CLR version may be used in
            matching this RuntimeFramework object.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.DisplayName">
            <summary>
            Returns the Display name for this framework
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.StackFilter">
            <summary>
            StackFilter class is used to remove internal NUnit
            entries from a stack trace so that the resulting
            trace provides better information about the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.StackFilter.Filter(System.String)">
            <summary>
            Filters a raw stack trace and returns the result.
            </summary>
            <param name="rawTrace">The original stack trace</param>
            <returns>A filtered stack trace</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionContext">
            <summary>
            Helper class used to save and restore certain static or
            singleton settings in the environment that affect tests 
            or which might be changed by the user tests.
            
            An internal class is used to hold settings and a stack
            of these objects is pushed and popped as Save and Restore
            are called.
            
            Static methods for each setting forward to the internal 
            object on the top of the stack.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.prior">
            <summary>
            Link to a prior saved context
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.currentTest">
            <summary>
            The currently executing test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.startTime">
            <summary>
            The time the test began execution
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.currentResult">
            <summary>
            The active TestResult for the current test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.workDirectory">
            <summary>
            The work directory to receive test output
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.testObject">
            <summary>
            The object on which tests are currently being executed - i.e. the user fixture object
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.listener">
            <summary>
            The event listener currently receiving notifications
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.assertCount">
            <summary>
            The number of assertions for the current test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.stopOnError">
            <summary>
            Indicates whether execution should terminate after the first error
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.outWriter">
            <summary>
            Destination for standard output
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.errorWriter">
            <summary>
            Destination for standard error
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.testCaseTimeout">
            <summary>
            Default timeout for test cases
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.#ctor(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> class.
            </summary>
            <param name="other">An existing instance of TestExecutionContext.</param>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.current">
            <summary>
            The current context, head of the list of saved contexts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.Save">
            <summary>
            Saves the old context and returns a fresh one 
            with the same settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.Restore">
            <summary>
            Restores the last saved context and puts
            any saved settings back into effect.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.UpdateContext">
            <summary>
            Record any changes in the environment made by
            the test code in the execution context so it
            will be passed on to lower level tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount">
            <summary>
            Increments the assert count.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentTest">
            <summary>
            Gets or sets the current test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StartTime">
            <summary>
            The time the current test started execution
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentResult">
            <summary>
            Gets or sets the current test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestObject">
            <summary>
            The current test object - that is the user fixture
            object on which tests are being executed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.WorkDirectory">
            <summary>
            Get or set the working directory
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StopOnError">
            <summary>
            Get or set indicator that run should stop on the first error
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Listener">
            <summary>
            The current test event listener
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.AssertCount">
            <summary>
            Gets the assert count.
            </summary>
            <value>The assert count.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Out">
            <summary>
            Controls where Console.Out is directed
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Error">
            <summary>
            Controls where Console.Error is directed
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestCaseTimeout">
            <summary>
            Gets or sets the test case timeout vaue
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFixtureBuilder">
            <summary>
            TestFixtureBuilder contains static methods for building
            TestFixtures from types. It uses builtin SuiteBuilders
            and any installed extensions to do it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureBuilder.CanBuildFrom(System.Type)">
            <summary>
            Determines whether this instance [can build from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance [can build from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureBuilder.BuildFrom(System.Type)">
            <summary>
            Build a test fixture from a given type.
            </summary>
            <param name="type">The type to be used for the fixture</param>
            <returns>A TestSuite if the fixture can be built, null if not</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureBuilder.BuildFrom(System.Object)">
            <summary>
            Build a fixture from an object. 
            </summary>
            <param name="fixture">The object to be used for the fixture</param>
            <returns>A TestSuite if fixture type can be built, null if not</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureBuilder.#ctor">
            <summary>
            Private constructor to prevent instantiation
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestListener">
            <summary>
            TestListener provides an implementation of ITestListener that
            does nothing. It is used only throught its NULL property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestStarted(NUnit.Framework.Api.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestFinished(NUnit.Framework.Api.ITestResult)">
            <summary>
            Called when a test case has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestOutput(NUnit.Framework.Api.TestOutput)">
            <summary>
            Called when the test creates text output.
            </summary>
            <param name="testOutput">A console message</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.#ctor">
            <summary>
            Construct a new TestListener - private so it may not be used.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestListener.NULL">
            <summary>
            Get a listener that does nothing
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TextMessageWriter">
            <summary>
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Expected">
            <summary>
            Prefix used for the expected value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Actual">
            <summary>
            Prefix used for the actual value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.PrefixLength">
            <summary>
            Length of a message prefix
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.#ctor">
            <summary>
            Construct a TextMessageWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.#ctor(System.String,System.Object[])">
            <summary>
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            </summary>
            <param name="userMessage"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in string comparisons</param>
            <param name="clipping">If true, clip the strings to fit the max line length</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteModifier(System.String)">
            <summary>
            Write the text for a modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Expected' line for a constraint
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(System.Object)">
            <summary>
            Write the generic 'Expected' line for a given value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Write the generic 'Expected' line for a given value
            and tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Actual' line for a constraint
            </summary>
            <param name="constraint">The constraint for which the actual value is to be written</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualLine(System.Object)">
            <summary>
            Write the generic 'Actual' line for a given value
            </summary>
            <param name="actual">The actual value causing a failure</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TextMessageWriter.MaxLineLength">
            <summary>
            Gets or sets the maximum line length for this writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TypeHelper">
            <summary>
            TypeHelper provides static methods that operate on Types.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type)">
            <summary>
            Gets the display name for a Type as used by NUnit.
            </summary>
            <param name="type">The Type for which a display name is needed.</param>
            <returns>The display name for the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type,System.Object[])">
            <summary>
            Gets the display name for a Type as used by NUnit.
            </summary>
            <param name="type">The Type for which a display name is needed.</param>
            <param name="arglist">The arglist provided.</param>
            <returns>The display name for the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.BestCommonType(System.Type,System.Type)">
            <summary>
            Returns the best fit for a common type to be used in
            matching actual arguments to a methods Type parameters.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
            <returns>Either type1 or type2, depending on which is more general.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric.
            </summary>
            <param name="type">The type to be examined.</param>
            <returns>
            	<c>true</c> if the specified type is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.ConvertArgumentList(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Convert an argument list to the required paramter types.
            Currently, only widening numeric conversions are performed.
            </summary>
            <param name="arglist">An array of args to be converted</param>
            <param name="parameters">A ParamterInfo[] whose types will be used as targets</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.MakeGenericType(System.Type,System.Type[])">
            <summary>
            Creates an instance of a generic Type using the supplied Type arguments
            </summary>
            <param name="type">The generic type to be specialized.</param>
            <param name="typeArgs">The type args.</param>
            <returns>An instance of the generic type.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.CanDeduceTypeArgsFromArgs(System.Type,System.Object[],System.Type[]@)">
            <summary>
            Determines whether this instance can deduce type args for a generic type from the supplied arguments.
            </summary>
            <param name="type">The type to be examined.</param>
            <param name="arglist">The arglist.</param>
            <param name="typeArgsOut">The type args to be used.</param>
            <returns>
            	<c>true</c> if this the provided args give sufficient information to determine the type args to be used; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetEnumValues(System.Type)">
            <summary>
            Gets the values for an enumeration, using Enum.GetTypes
            where available, otherwise through reflection.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:NUnitLite.Runner.NUnit2XmlOutputWriter">
            <summary>
            NUnit2XmlOutputWriter is able to create an xml file representing
            the result of a test run in NUnit 2.x format.
            </summary>
        </member>
        <member name="T:NUnitLite.Runner.OutputWriter">
            <summary>
            OutputWriter is an abstract class used to write test
            results to a file in various formats. Specific 
            OutputWriters are derived from this class.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.OutputWriter.WriteResultFile(NUnit.Framework.Api.ITestResult,System.String)">
            <summary>
            Writes a test result to a file
            </summary>
            <param name="result">The result to be written</param>
            <param name="outputPath">Path to the file to which the result is written</param>
        </member>
        <member name="M:NUnitLite.Runner.OutputWriter.WriteResultFile(NUnit.Framework.Api.ITestResult,System.IO.TextWriter)">
            <summary>
            Abstract method that writes a test result to a TextWriter
            </summary>
            <param name="result">The result to be written</param>
            <param name="writer">A TextWriter to which the result is written</param>
        </member>
        <member name="M:NUnitLite.Runner.NUnit2XmlOutputWriter.WriteResultFile(NUnit.Framework.Api.ITestResult,System.IO.TextWriter)">
            <summary>
            Writes the result of a test run to a specified TextWriter.
            </summary>
            <param name="result">The test result for the run</param>
            <param name="writer">The TextWriter to which the xml will be written</param>
        </member>
        <member name="T:NUnitLite.Runner.NUnit3XmlOutputWriter">
            <summary>
            NUnit3XmlOutputWriter is responsible for writing the results
            of a test to a file in NUnit 3.0 format.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.NUnit3XmlOutputWriter.WriteResultFile(NUnit.Framework.Api.ITestResult,System.IO.TextWriter)">
            <summary>
            Writes the test result to the specified TextWriter
            </summary>
            <param name="result">The result to be written to a file</param>
            <param name="writer">A TextWriter to which the result is written</param>
        </member>
        <member name="T:NUnitLite.Runner.CommandLineOptions">
            <summary>
            The CommandLineOptions class parses and holds the values of
            any options entered at the command line.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.CommandLineOptions.#ctor">
            <summary>
            Construct a CommandLineOptions object using default option chars
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.CommandLineOptions.#ctor(System.String)">
            <summary>
            Construct a CommandLineOptions object using specified option chars
            </summary>
            <param name="optionChars"></param>
        </member>
        <member name="M:NUnitLite.Runner.CommandLineOptions.Parse(System.String[])">
            <summary>
            Parse command arguments and initialize option settings accordingly
            </summary>
            <param name="args">The argument list</param>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.Wait">
            <summary>
            Gets a value indicating whether the 'wait' option was used.
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.NoHeader">
            <summary>
            Gets a value indicating whether the 'nologo' option was used.
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.ShowHelp">
            <summary>
            Gets a value indicating whether the 'help' option was used.
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.Tests">
            <summary>
            Gets a list of all tests specified on the command line
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.Full">
            <summary>
            Gets a value indicating whether a full report should be displayed
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.Explore">
            <summary>
            Gets a value indicating whether tests should be listed
            rather than run.
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.ExploreFile">
            <summary>
            Gets the name of the file to be used for listing tests
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.ResultFile">
            <summary>
            Gets the name of the file to be used for test results
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.ResultFormat">
            <summary>
            Gets the format to be used for test results
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.OutFile">
            <summary>
            Gets the full path of the file to be used for output
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.LabelTestsInOutput">
            <summary>
            Gets a flag indicating whether each test should
            be labeled in the output.
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.TestCount">
            <summary>
            Gets the test count
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.Parameters">
            <summary>
             Gets the parameters provided on the commandline
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.Error">
            <summary>
            Gets a value indicating whether there was an error in parsing the options.
            </summary>
            <value><c>true</c> if error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:NUnitLite.Runner.CommandLineOptions.HelpText">
            <summary>
            Gets the help text.
            </summary>
            <value>The help text.</value>
        </member>
        <member name="T:NUnitLite.Runner.ConsoleWriter">
            <summary>
            Provide an alternative to Console.Out for 
            version 1.0 of the compact framework.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.ConsoleWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:NUnitLite.Runner.ConsoleWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:NUnitLite.Runner.ConsoleWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value"/> is null, only the line termination characters are written.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="P:NUnitLite.Runner.ConsoleWriter.Out">
            <summary>
            Gets the underlying TextWriter, creating it if it does not already exist.
            </summary>
            <value>The underlying TextWriter.</value>
        </member>
        <member name="P:NUnitLite.Runner.ConsoleWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>
            The Encoding in which the output is written.
            </returns>
        </member>
        <member name="T:NUnitLite.Runner.DebugWriter">
            <summary>
            DebugWriter is a TextWriter that sends it's 
            output to Debug. We don't use Trace because
            writing to it is not supported in CF.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.DebugWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:NUnitLite.Runner.DebugWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:NUnitLite.Runner.DebugWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value"/> is null, only the line termination characters are written.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="P:NUnitLite.Runner.DebugWriter.Out">
            <summary>
            Singleon instance of a DebugWriter.
            </summary>
            <value>The DebugWriter singleton.</value>
        </member>
        <member name="P:NUnitLite.Runner.DebugWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>
            The Encoding in which the output is written.
            </returns>
        </member>
        <member name="T:NUnitLite.Runner.ResultSummary">
            <summary>
            Helper class used to summarize the result of a test run
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.ResultSummary.#ctor(NUnit.Framework.Api.ITestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnitLite.Runner.ResultSummary"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.TestCount">
            <summary>
            Gets the test count.
            </summary>
            <value>The test count.</value>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.ErrorCount">
            <summary>
            Gets the error count.
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.FailureCount">
            <summary>
            Gets the failure count.
            </summary>
            <value>The failure count.</value>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.NotRunCount">
            <summary>
            Gets the not run count.
            </summary>
            <value>The not run count.</value>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.IgnoreCount">
            <summary>
            Gets the ignore count
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.SkipCount">
            <summary>
            Gets the skip count
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.InvalidCount">
            <summary>
            Gets the invalid count
            </summary>
        </member>
        <member name="P:NUnitLite.Runner.ResultSummary.InconclusiveCount">
            <summary>
            Gets the count of inconclusive results
            </summary>
        </member>
        <member name="T:NUnitLite.Runner.TcpWriter">
            <summary>
            Redirects output to a Tcp connection
            </summary>
        </member>
        <member name="T:NUnitLite.Runner.TextUI">
            <summary>
            TextUI is a general purpose class that runs tests and
            outputs to a TextWriter.
            
            Call it from your Main like this:
              new TextUI(textWriter).Execute(args);
                OR
              new TextUI().Execute(args);
            The provided TextWriter is used by default, unless the
            arguments to Execute override it using -out. The second
            form uses the Console, provided it exists on the platform.
            
            NOTE: When running on a platform without a Console, such
            as Windows Phone, the results will simply not appear if
            you fail to specify a file in the call itself or as an option.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.TextUI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnitLite.Runner.TextUI"/> class.
            </summary>
        </member>
        <member name="M:NUnitLite.Runner.TextUI.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnitLite.Runner.TextUI"/> class.
            </summary>
            <param name="writer">The TextWriter to use.</param>
        </member>
        <member name="M:NUnitLite.Runner.TextUI.Execute(System.String[])">
            <summary>
            Execute a test run based on the aruments passed
            from Main.
            </summary>
            <param name="args">An array of arguments</param>
        </member>
        <member name="M:NUnitLite.Runner.TextUI.ReportResults(NUnit.Framework.Api.ITestResult)">
            <summary>
            Reports the results.
            </summary>
            <param name="result">The result.</param>
        </member>
    </members>
</doc>
